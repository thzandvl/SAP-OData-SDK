//EntityType AutoGenerated by tool
using Microsoft.Extensions.DependencyInjection;
using System.ComponentModel.DataAnnotations;
using DataOperations.OData; 
using DataOperations; 

namespace API_PURCHASEORDER_PROCESS_SRV
{

    public class A_PurchaseOrderNoteType : BaseDTOWithIDAndETag
    {
        private string _PurchaseOrder;
        public string PurchaseOrder 
        { 
            get {
                return _PurchaseOrder;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("PurchaseOrder cannot be null and must have a value.");
                }
                if(value.Length > 10)
                {
                    throw new ValidationException("PurchaseOrder cannot be longer than 10 characters.");
                }
                else
                {
                    _PurchaseOrder = value;
                }
            }
        }
        private string _TextObjectType;
        public string TextObjectType 
        { 
            get {
                return _TextObjectType;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("TextObjectType cannot be null and must have a value.");
                }
                if(value.Length > 4)
                {
                    throw new ValidationException("TextObjectType cannot be longer than 4 characters.");
                }
                else
                {
                    _TextObjectType = value;
                }
            }
        }
        private string _Language;
        public string Language 
        { 
            get {
                return _Language;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("Language cannot be null and must have a value.");
                }
                if(value.Length > 2)
                {
                    throw new ValidationException("Language cannot be longer than 2 characters.");
                }
                else
                {
                    _Language = value;
                }
            }
        }
        private string _PlainLongText;
        public string PlainLongText 
        { 
            get { 
                return _PlainLongText;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("PlainLongText cannot be null and must have a value.");
                }
                else
                {
                    _PlainLongText = value;
                }
            }
        }
        
        protected override Dictionary<string, List<string>> ReferenceKeys 
        {   
            get 
            {
                var result = new Dictionary<string, List<string>>();
                result.Add("PrimaryKey", new List<string>() {"PurchaseOrder","TextObjectType","Language"});

                return result;
            }
        }


    }
}
