//EntityType AutoGenerated by tool
using Microsoft.Extensions.DependencyInjection;
using System.ComponentModel.DataAnnotations;
using DataOperations.OData; 
using DataOperations; 

namespace API_PURCHASEORDER_PROCESS_SRV
{

    public class A_PurchaseOrderItemType : BaseDTOWithIDAndETag
    {
        private string _PurchaseOrder;
        public string PurchaseOrder 
        { 
            get {
                return _PurchaseOrder;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("PurchaseOrder cannot be null and must have a value.");
                }
                if(value.Length > 10)
                {
                    throw new ValidationException("PurchaseOrder cannot be longer than 10 characters.");
                }
                else
                {
                    _PurchaseOrder = value;
                }
            }
        }
        private string _PurchaseOrderItem;
        public string PurchaseOrderItem 
        { 
            get {
                return _PurchaseOrderItem;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("PurchaseOrderItem cannot be null and must have a value.");
                }
                if(value.Length > 5)
                {
                    throw new ValidationException("PurchaseOrderItem cannot be longer than 5 characters.");
                }
                else
                {
                    _PurchaseOrderItem = value;
                }
            }
        }
        private string _PurchasingDocumentDeletionCode;
        public string PurchasingDocumentDeletionCode 
        { 
            get {
                return _PurchasingDocumentDeletionCode;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("PurchasingDocumentDeletionCode cannot be null and must have a value.");
                }
                if(value.Length > 1)
                {
                    throw new ValidationException("PurchasingDocumentDeletionCode cannot be longer than 1 characters.");
                }
                else
                {
                    _PurchasingDocumentDeletionCode = value;
                }
            }
        }
        private string _PurchaseOrderItemText;
        public string PurchaseOrderItemText 
        { 
            get {
                return _PurchaseOrderItemText;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("PurchaseOrderItemText cannot be null and must have a value.");
                }
                if(value.Length > 40)
                {
                    throw new ValidationException("PurchaseOrderItemText cannot be longer than 40 characters.");
                }
                else
                {
                    _PurchaseOrderItemText = value;
                }
            }
        }
        private string _Plant;
        public string Plant 
        { 
            get {
                return _Plant;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("Plant cannot be null and must have a value.");
                }
                if(value.Length > 4)
                {
                    throw new ValidationException("Plant cannot be longer than 4 characters.");
                }
                else
                {
                    _Plant = value;
                }
            }
        }
        private string _StorageLocation;
        public string StorageLocation 
        { 
            get {
                return _StorageLocation;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("StorageLocation cannot be null and must have a value.");
                }
                if(value.Length > 4)
                {
                    throw new ValidationException("StorageLocation cannot be longer than 4 characters.");
                }
                else
                {
                    _StorageLocation = value;
                }
            }
        }
        private string _MaterialGroup;
        public string MaterialGroup 
        { 
            get {
                return _MaterialGroup;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("MaterialGroup cannot be null and must have a value.");
                }
                if(value.Length > 9)
                {
                    throw new ValidationException("MaterialGroup cannot be longer than 9 characters.");
                }
                else
                {
                    _MaterialGroup = value;
                }
            }
        }
        private string _PurchasingInfoRecord;
        public string PurchasingInfoRecord 
        { 
            get {
                return _PurchasingInfoRecord;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("PurchasingInfoRecord cannot be null and must have a value.");
                }
                if(value.Length > 10)
                {
                    throw new ValidationException("PurchasingInfoRecord cannot be longer than 10 characters.");
                }
                else
                {
                    _PurchasingInfoRecord = value;
                }
            }
        }
        private string _SupplierMaterialNumber;
        public string SupplierMaterialNumber 
        { 
            get {
                return _SupplierMaterialNumber;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("SupplierMaterialNumber cannot be null and must have a value.");
                }
                if(value.Length > 35)
                {
                    throw new ValidationException("SupplierMaterialNumber cannot be longer than 35 characters.");
                }
                else
                {
                    _SupplierMaterialNumber = value;
                }
            }
        }
        public decimal OrderQuantity { get; set; }
        private string _PurchaseOrderQuantityUnit;
        public string PurchaseOrderQuantityUnit 
        { 
            get {
                return _PurchaseOrderQuantityUnit;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("PurchaseOrderQuantityUnit cannot be null and must have a value.");
                }
                if(value.Length > 3)
                {
                    throw new ValidationException("PurchaseOrderQuantityUnit cannot be longer than 3 characters.");
                }
                else
                {
                    _PurchaseOrderQuantityUnit = value;
                }
            }
        }
        private string _OrderPriceUnit;
        public string OrderPriceUnit 
        { 
            get {
                return _OrderPriceUnit;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("OrderPriceUnit cannot be null and must have a value.");
                }
                if(value.Length > 3)
                {
                    throw new ValidationException("OrderPriceUnit cannot be longer than 3 characters.");
                }
                else
                {
                    _OrderPriceUnit = value;
                }
            }
        }
        public decimal OrderPriceUnitToOrderUnitNmrtr { get; set; }
        public decimal OrdPriceUnitToOrderUnitDnmntr { get; set; }
        private string _DocumentCurrency;
        public string DocumentCurrency 
        { 
            get {
                return _DocumentCurrency;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("DocumentCurrency cannot be null and must have a value.");
                }
                if(value.Length > 5)
                {
                    throw new ValidationException("DocumentCurrency cannot be longer than 5 characters.");
                }
                else
                {
                    _DocumentCurrency = value;
                }
            }
        }
        public decimal NetPriceAmount { get; set; }
        public decimal NetPriceQuantity { get; set; }
        private string _TaxCode;
        public string TaxCode 
        { 
            get {
                return _TaxCode;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("TaxCode cannot be null and must have a value.");
                }
                if(value.Length > 2)
                {
                    throw new ValidationException("TaxCode cannot be longer than 2 characters.");
                }
                else
                {
                    _TaxCode = value;
                }
            }
        }
        public Edm.Date TaxDeterminationDate { get; set; }
        private string _TaxCountry;
        public string TaxCountry 
        { 
            get {
                return _TaxCountry;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("TaxCountry cannot be null and must have a value.");
                }
                if(value.Length > 3)
                {
                    throw new ValidationException("TaxCountry cannot be longer than 3 characters.");
                }
                else
                {
                    _TaxCountry = value;
                }
            }
        }
        public Edm.Boolean PriceIsToBePrinted { get; set; }
        public decimal OverdelivTolrtdLmtRatioInPct { get; set; }
        public Edm.Boolean UnlimitedOverdeliveryIsAllowed { get; set; }
        public decimal UnderdelivTolrtdLmtRatioInPct { get; set; }
        private string _ValuationType;
        public string ValuationType 
        { 
            get {
                return _ValuationType;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("ValuationType cannot be null and must have a value.");
                }
                if(value.Length > 10)
                {
                    throw new ValidationException("ValuationType cannot be longer than 10 characters.");
                }
                else
                {
                    _ValuationType = value;
                }
            }
        }
        public Edm.Boolean IsCompletelyDelivered { get; set; }
        public Edm.Boolean IsFinallyInvoiced { get; set; }
        private string _PurchaseOrderItemCategory;
        public string PurchaseOrderItemCategory 
        { 
            get {
                return _PurchaseOrderItemCategory;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("PurchaseOrderItemCategory cannot be null and must have a value.");
                }
                if(value.Length > 1)
                {
                    throw new ValidationException("PurchaseOrderItemCategory cannot be longer than 1 characters.");
                }
                else
                {
                    _PurchaseOrderItemCategory = value;
                }
            }
        }
        private string _AccountAssignmentCategory;
        public string AccountAssignmentCategory 
        { 
            get {
                return _AccountAssignmentCategory;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("AccountAssignmentCategory cannot be null and must have a value.");
                }
                if(value.Length > 1)
                {
                    throw new ValidationException("AccountAssignmentCategory cannot be longer than 1 characters.");
                }
                else
                {
                    _AccountAssignmentCategory = value;
                }
            }
        }
        private string _MultipleAcctAssgmtDistribution;
        public string MultipleAcctAssgmtDistribution 
        { 
            get {
                return _MultipleAcctAssgmtDistribution;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("MultipleAcctAssgmtDistribution cannot be null and must have a value.");
                }
                if(value.Length > 1)
                {
                    throw new ValidationException("MultipleAcctAssgmtDistribution cannot be longer than 1 characters.");
                }
                else
                {
                    _MultipleAcctAssgmtDistribution = value;
                }
            }
        }
        private string _PartialInvoiceDistribution;
        public string PartialInvoiceDistribution 
        { 
            get {
                return _PartialInvoiceDistribution;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("PartialInvoiceDistribution cannot be null and must have a value.");
                }
                if(value.Length > 1)
                {
                    throw new ValidationException("PartialInvoiceDistribution cannot be longer than 1 characters.");
                }
                else
                {
                    _PartialInvoiceDistribution = value;
                }
            }
        }
        public Edm.Boolean GoodsReceiptIsExpected { get; set; }
        public Edm.Boolean GoodsReceiptIsNonValuated { get; set; }
        public Edm.Boolean InvoiceIsExpected { get; set; }
        public Edm.Boolean InvoiceIsGoodsReceiptBased { get; set; }
        private string _PurchaseContract;
        public string PurchaseContract 
        { 
            get {
                return _PurchaseContract;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("PurchaseContract cannot be null and must have a value.");
                }
                if(value.Length > 10)
                {
                    throw new ValidationException("PurchaseContract cannot be longer than 10 characters.");
                }
                else
                {
                    _PurchaseContract = value;
                }
            }
        }
        private string _PurchaseContractItem;
        public string PurchaseContractItem 
        { 
            get {
                return _PurchaseContractItem;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("PurchaseContractItem cannot be null and must have a value.");
                }
                if(value.Length > 5)
                {
                    throw new ValidationException("PurchaseContractItem cannot be longer than 5 characters.");
                }
                else
                {
                    _PurchaseContractItem = value;
                }
            }
        }
        private string _Customer;
        public string Customer 
        { 
            get {
                return _Customer;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("Customer cannot be null and must have a value.");
                }
                if(value.Length > 10)
                {
                    throw new ValidationException("Customer cannot be longer than 10 characters.");
                }
                else
                {
                    _Customer = value;
                }
            }
        }
        private string _Subcontractor;
        public string Subcontractor 
        { 
            get {
                return _Subcontractor;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("Subcontractor cannot be null and must have a value.");
                }
                if(value.Length > 10)
                {
                    throw new ValidationException("Subcontractor cannot be longer than 10 characters.");
                }
                else
                {
                    _Subcontractor = value;
                }
            }
        }
        public Edm.Boolean SupplierIsSubcontractor { get; set; }
        public decimal ItemNetWeight { get; set; }
        private string _ItemWeightUnit;
        public string ItemWeightUnit 
        { 
            get {
                return _ItemWeightUnit;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("ItemWeightUnit cannot be null and must have a value.");
                }
                if(value.Length > 3)
                {
                    throw new ValidationException("ItemWeightUnit cannot be longer than 3 characters.");
                }
                else
                {
                    _ItemWeightUnit = value;
                }
            }
        }
        private string _TaxJurisdiction;
        public string TaxJurisdiction 
        { 
            get {
                return _TaxJurisdiction;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("TaxJurisdiction cannot be null and must have a value.");
                }
                if(value.Length > 15)
                {
                    throw new ValidationException("TaxJurisdiction cannot be longer than 15 characters.");
                }
                else
                {
                    _TaxJurisdiction = value;
                }
            }
        }
        private string _PricingDateControl;
        public string PricingDateControl 
        { 
            get {
                return _PricingDateControl;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("PricingDateControl cannot be null and must have a value.");
                }
                if(value.Length > 1)
                {
                    throw new ValidationException("PricingDateControl cannot be longer than 1 characters.");
                }
                else
                {
                    _PricingDateControl = value;
                }
            }
        }
        public decimal ItemVolume { get; set; }
        private string _ItemVolumeUnit;
        public string ItemVolumeUnit 
        { 
            get {
                return _ItemVolumeUnit;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("ItemVolumeUnit cannot be null and must have a value.");
                }
                if(value.Length > 3)
                {
                    throw new ValidationException("ItemVolumeUnit cannot be longer than 3 characters.");
                }
                else
                {
                    _ItemVolumeUnit = value;
                }
            }
        }
        private string _SupplierConfirmationControlKey;
        public string SupplierConfirmationControlKey 
        { 
            get {
                return _SupplierConfirmationControlKey;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("SupplierConfirmationControlKey cannot be null and must have a value.");
                }
                if(value.Length > 4)
                {
                    throw new ValidationException("SupplierConfirmationControlKey cannot be longer than 4 characters.");
                }
                else
                {
                    _SupplierConfirmationControlKey = value;
                }
            }
        }
        private string _IncotermsClassification;
        public string IncotermsClassification 
        { 
            get {
                return _IncotermsClassification;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("IncotermsClassification cannot be null and must have a value.");
                }
                if(value.Length > 3)
                {
                    throw new ValidationException("IncotermsClassification cannot be longer than 3 characters.");
                }
                else
                {
                    _IncotermsClassification = value;
                }
            }
        }
        private string _IncotermsTransferLocation;
        public string IncotermsTransferLocation 
        { 
            get {
                return _IncotermsTransferLocation;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("IncotermsTransferLocation cannot be null and must have a value.");
                }
                if(value.Length > 28)
                {
                    throw new ValidationException("IncotermsTransferLocation cannot be longer than 28 characters.");
                }
                else
                {
                    _IncotermsTransferLocation = value;
                }
            }
        }
        public Edm.Boolean EvaldRcptSettlmtIsAllowed { get; set; }
        private string _PurchaseRequisition;
        public string PurchaseRequisition 
        { 
            get {
                return _PurchaseRequisition;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("PurchaseRequisition cannot be null and must have a value.");
                }
                if(value.Length > 10)
                {
                    throw new ValidationException("PurchaseRequisition cannot be longer than 10 characters.");
                }
                else
                {
                    _PurchaseRequisition = value;
                }
            }
        }
        private string _PurchaseRequisitionItem;
        public string PurchaseRequisitionItem 
        { 
            get {
                return _PurchaseRequisitionItem;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("PurchaseRequisitionItem cannot be null and must have a value.");
                }
                if(value.Length > 5)
                {
                    throw new ValidationException("PurchaseRequisitionItem cannot be longer than 5 characters.");
                }
                else
                {
                    _PurchaseRequisitionItem = value;
                }
            }
        }
        public Edm.Boolean IsReturnsItem { get; set; }
        private string _RequisitionerName;
        public string RequisitionerName 
        { 
            get {
                return _RequisitionerName;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("RequisitionerName cannot be null and must have a value.");
                }
                if(value.Length > 12)
                {
                    throw new ValidationException("RequisitionerName cannot be longer than 12 characters.");
                }
                else
                {
                    _RequisitionerName = value;
                }
            }
        }
        private string _ServicePackage;
        public string ServicePackage 
        { 
            get {
                return _ServicePackage;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("ServicePackage cannot be null and must have a value.");
                }
                if(value.Length > 10)
                {
                    throw new ValidationException("ServicePackage cannot be longer than 10 characters.");
                }
                else
                {
                    _ServicePackage = value;
                }
            }
        }
        private string _EarmarkedFunds;
        public string EarmarkedFunds 
        { 
            get {
                return _EarmarkedFunds;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("EarmarkedFunds cannot be null and must have a value.");
                }
                if(value.Length > 10)
                {
                    throw new ValidationException("EarmarkedFunds cannot be longer than 10 characters.");
                }
                else
                {
                    _EarmarkedFunds = value;
                }
            }
        }
        private string _EarmarkedFundsDocument;
        public string EarmarkedFundsDocument 
        { 
            get {
                return _EarmarkedFundsDocument;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("EarmarkedFundsDocument cannot be null and must have a value.");
                }
                if(value.Length > 10)
                {
                    throw new ValidationException("EarmarkedFundsDocument cannot be longer than 10 characters.");
                }
                else
                {
                    _EarmarkedFundsDocument = value;
                }
            }
        }
        private string _EarmarkedFundsItem;
        public string EarmarkedFundsItem 
        { 
            get {
                return _EarmarkedFundsItem;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("EarmarkedFundsItem cannot be null and must have a value.");
                }
                if(value.Length > 3)
                {
                    throw new ValidationException("EarmarkedFundsItem cannot be longer than 3 characters.");
                }
                else
                {
                    _EarmarkedFundsItem = value;
                }
            }
        }
        private string _EarmarkedFundsDocumentItem;
        public string EarmarkedFundsDocumentItem 
        { 
            get {
                return _EarmarkedFundsDocumentItem;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("EarmarkedFundsDocumentItem cannot be null and must have a value.");
                }
                if(value.Length > 3)
                {
                    throw new ValidationException("EarmarkedFundsDocumentItem cannot be longer than 3 characters.");
                }
                else
                {
                    _EarmarkedFundsDocumentItem = value;
                }
            }
        }
        private string _IncotermsLocation1;
        public string IncotermsLocation1 
        { 
            get {
                return _IncotermsLocation1;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("IncotermsLocation1 cannot be null and must have a value.");
                }
                if(value.Length > 70)
                {
                    throw new ValidationException("IncotermsLocation1 cannot be longer than 70 characters.");
                }
                else
                {
                    _IncotermsLocation1 = value;
                }
            }
        }
        private string _IncotermsLocation2;
        public string IncotermsLocation2 
        { 
            get {
                return _IncotermsLocation2;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("IncotermsLocation2 cannot be null and must have a value.");
                }
                if(value.Length > 70)
                {
                    throw new ValidationException("IncotermsLocation2 cannot be longer than 70 characters.");
                }
                else
                {
                    _IncotermsLocation2 = value;
                }
            }
        }
        private string _Material;
        public string Material 
        { 
            get {
                return _Material;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("Material cannot be null and must have a value.");
                }
                if(value.Length > 40)
                {
                    throw new ValidationException("Material cannot be longer than 40 characters.");
                }
                else
                {
                    _Material = value;
                }
            }
        }
        private string _InternationalArticleNumber;
        public string InternationalArticleNumber 
        { 
            get {
                return _InternationalArticleNumber;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("InternationalArticleNumber cannot be null and must have a value.");
                }
                if(value.Length > 18)
                {
                    throw new ValidationException("InternationalArticleNumber cannot be longer than 18 characters.");
                }
                else
                {
                    _InternationalArticleNumber = value;
                }
            }
        }
        private string _ManufacturerMaterial;
        public string ManufacturerMaterial 
        { 
            get {
                return _ManufacturerMaterial;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("ManufacturerMaterial cannot be null and must have a value.");
                }
                if(value.Length > 40)
                {
                    throw new ValidationException("ManufacturerMaterial cannot be longer than 40 characters.");
                }
                else
                {
                    _ManufacturerMaterial = value;
                }
            }
        }
        private string _ServicePerformer;
        public string ServicePerformer 
        { 
            get {
                return _ServicePerformer;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("ServicePerformer cannot be null and must have a value.");
                }
                if(value.Length > 10)
                {
                    throw new ValidationException("ServicePerformer cannot be longer than 10 characters.");
                }
                else
                {
                    _ServicePerformer = value;
                }
            }
        }
        private string _ProductType;
        public string ProductType 
        { 
            get {
                return _ProductType;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("ProductType cannot be null and must have a value.");
                }
                if(value.Length > 2)
                {
                    throw new ValidationException("ProductType cannot be longer than 2 characters.");
                }
                else
                {
                    _ProductType = value;
                }
            }
        }
        public decimal ExpectedOverallLimitAmount { get; set; }
        public decimal OverallLimitAmount { get; set; }
        private string _PurContractForOverallLimit;
        public string PurContractForOverallLimit 
        { 
            get {
                return _PurContractForOverallLimit;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("PurContractForOverallLimit cannot be null and must have a value.");
                }
                if(value.Length > 10)
                {
                    throw new ValidationException("PurContractForOverallLimit cannot be longer than 10 characters.");
                }
                else
                {
                    _PurContractForOverallLimit = value;
                }
            }
        }
        private string _ReferenceDeliveryAddressID;
        public string ReferenceDeliveryAddressID 
        { 
            get {
                return _ReferenceDeliveryAddressID;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("ReferenceDeliveryAddressID cannot be null and must have a value.");
                }
                if(value.Length > 10)
                {
                    throw new ValidationException("ReferenceDeliveryAddressID cannot be longer than 10 characters.");
                }
                else
                {
                    _ReferenceDeliveryAddressID = value;
                }
            }
        }
        private string _DeliveryAddressID;
        public string DeliveryAddressID 
        { 
            get {
                return _DeliveryAddressID;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("DeliveryAddressID cannot be null and must have a value.");
                }
                if(value.Length > 10)
                {
                    throw new ValidationException("DeliveryAddressID cannot be longer than 10 characters.");
                }
                else
                {
                    _DeliveryAddressID = value;
                }
            }
        }
        private string _DeliveryAddressName;
        public string DeliveryAddressName 
        { 
            get {
                return _DeliveryAddressName;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("DeliveryAddressName cannot be null and must have a value.");
                }
                if(value.Length > 40)
                {
                    throw new ValidationException("DeliveryAddressName cannot be longer than 40 characters.");
                }
                else
                {
                    _DeliveryAddressName = value;
                }
            }
        }
        private string _DeliveryAddressName2;
        public string DeliveryAddressName2 
        { 
            get {
                return _DeliveryAddressName2;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("DeliveryAddressName2 cannot be null and must have a value.");
                }
                if(value.Length > 40)
                {
                    throw new ValidationException("DeliveryAddressName2 cannot be longer than 40 characters.");
                }
                else
                {
                    _DeliveryAddressName2 = value;
                }
            }
        }
        private string _DeliveryAddressFullName;
        public string DeliveryAddressFullName 
        { 
            get {
                return _DeliveryAddressFullName;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("DeliveryAddressFullName cannot be null and must have a value.");
                }
                if(value.Length > 80)
                {
                    throw new ValidationException("DeliveryAddressFullName cannot be longer than 80 characters.");
                }
                else
                {
                    _DeliveryAddressFullName = value;
                }
            }
        }
        private string _DeliveryAddressStreetName;
        public string DeliveryAddressStreetName 
        { 
            get {
                return _DeliveryAddressStreetName;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("DeliveryAddressStreetName cannot be null and must have a value.");
                }
                if(value.Length > 60)
                {
                    throw new ValidationException("DeliveryAddressStreetName cannot be longer than 60 characters.");
                }
                else
                {
                    _DeliveryAddressStreetName = value;
                }
            }
        }
        private string _DeliveryAddressHouseNumber;
        public string DeliveryAddressHouseNumber 
        { 
            get {
                return _DeliveryAddressHouseNumber;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("DeliveryAddressHouseNumber cannot be null and must have a value.");
                }
                if(value.Length > 10)
                {
                    throw new ValidationException("DeliveryAddressHouseNumber cannot be longer than 10 characters.");
                }
                else
                {
                    _DeliveryAddressHouseNumber = value;
                }
            }
        }
        private string _DeliveryAddressCityName;
        public string DeliveryAddressCityName 
        { 
            get {
                return _DeliveryAddressCityName;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("DeliveryAddressCityName cannot be null and must have a value.");
                }
                if(value.Length > 40)
                {
                    throw new ValidationException("DeliveryAddressCityName cannot be longer than 40 characters.");
                }
                else
                {
                    _DeliveryAddressCityName = value;
                }
            }
        }
        private string _DeliveryAddressPostalCode;
        public string DeliveryAddressPostalCode 
        { 
            get {
                return _DeliveryAddressPostalCode;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("DeliveryAddressPostalCode cannot be null and must have a value.");
                }
                if(value.Length > 10)
                {
                    throw new ValidationException("DeliveryAddressPostalCode cannot be longer than 10 characters.");
                }
                else
                {
                    _DeliveryAddressPostalCode = value;
                }
            }
        }
        private string _DeliveryAddressRegion;
        public string DeliveryAddressRegion 
        { 
            get {
                return _DeliveryAddressRegion;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("DeliveryAddressRegion cannot be null and must have a value.");
                }
                if(value.Length > 3)
                {
                    throw new ValidationException("DeliveryAddressRegion cannot be longer than 3 characters.");
                }
                else
                {
                    _DeliveryAddressRegion = value;
                }
            }
        }
        private string _DeliveryAddressCountry;
        public string DeliveryAddressCountry 
        { 
            get {
                return _DeliveryAddressCountry;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("DeliveryAddressCountry cannot be null and must have a value.");
                }
                if(value.Length > 3)
                {
                    throw new ValidationException("DeliveryAddressCountry cannot be longer than 3 characters.");
                }
                else
                {
                    _DeliveryAddressCountry = value;
                }
            }
        }
        private string _DownPaymentType;
        public string DownPaymentType 
        { 
            get {
                return _DownPaymentType;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("DownPaymentType cannot be null and must have a value.");
                }
                if(value.Length > 4)
                {
                    throw new ValidationException("DownPaymentType cannot be longer than 4 characters.");
                }
                else
                {
                    _DownPaymentType = value;
                }
            }
        }
        public decimal DownPaymentPercentageOfTotAmt { get; set; }
        public decimal DownPaymentAmount { get; set; }
        public Edm.Date DownPaymentDueDate { get; set; }
        private string _BR_MaterialUsage;
        public string BR_MaterialUsage 
        { 
            get {
                return _BR_MaterialUsage;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("BR_MaterialUsage cannot be null and must have a value.");
                }
                if(value.Length > 1)
                {
                    throw new ValidationException("BR_MaterialUsage cannot be longer than 1 characters.");
                }
                else
                {
                    _BR_MaterialUsage = value;
                }
            }
        }
        private string _BR_MaterialOrigin;
        public string BR_MaterialOrigin 
        { 
            get {
                return _BR_MaterialOrigin;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("BR_MaterialOrigin cannot be null and must have a value.");
                }
                if(value.Length > 1)
                {
                    throw new ValidationException("BR_MaterialOrigin cannot be longer than 1 characters.");
                }
                else
                {
                    _BR_MaterialOrigin = value;
                }
            }
        }
        private string _BR_CFOPCategory;
        public string BR_CFOPCategory 
        { 
            get {
                return _BR_CFOPCategory;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("BR_CFOPCategory cannot be null and must have a value.");
                }
                if(value.Length > 2)
                {
                    throw new ValidationException("BR_CFOPCategory cannot be longer than 2 characters.");
                }
                else
                {
                    _BR_CFOPCategory = value;
                }
            }
        }
        public Edm.Boolean BR_IsProducedInHouse { get; set; }
        private string _ConsumptionTaxCtrlCode;
        public string ConsumptionTaxCtrlCode 
        { 
            get {
                return _ConsumptionTaxCtrlCode;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("ConsumptionTaxCtrlCode cannot be null and must have a value.");
                }
                if(value.Length > 16)
                {
                    throw new ValidationException("ConsumptionTaxCtrlCode cannot be longer than 16 characters.");
                }
                else
                {
                    _ConsumptionTaxCtrlCode = value;
                }
            }
        }
        private string _PurgProdCmplncSupplierStatus;
        public string PurgProdCmplncSupplierStatus 
        { 
            get {
                return _PurgProdCmplncSupplierStatus;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("PurgProdCmplncSupplierStatus cannot be null and must have a value.");
                }
                if(value.Length > 1)
                {
                    throw new ValidationException("PurgProdCmplncSupplierStatus cannot be longer than 1 characters.");
                }
                else
                {
                    _PurgProdCmplncSupplierStatus = value;
                }
            }
        }
        private string _PurgProductMarketabilityStatus;
        public string PurgProductMarketabilityStatus 
        { 
            get {
                return _PurgProductMarketabilityStatus;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("PurgProductMarketabilityStatus cannot be null and must have a value.");
                }
                if(value.Length > 1)
                {
                    throw new ValidationException("PurgProductMarketabilityStatus cannot be longer than 1 characters.");
                }
                else
                {
                    _PurgProductMarketabilityStatus = value;
                }
            }
        }
        private string _PurgSafetyDataSheetStatus;
        public string PurgSafetyDataSheetStatus 
        { 
            get {
                return _PurgSafetyDataSheetStatus;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("PurgSafetyDataSheetStatus cannot be null and must have a value.");
                }
                if(value.Length > 1)
                {
                    throw new ValidationException("PurgSafetyDataSheetStatus cannot be longer than 1 characters.");
                }
                else
                {
                    _PurgSafetyDataSheetStatus = value;
                }
            }
        }
        private string _PurgProdCmplncDngrsGoodsStatus;
        public string PurgProdCmplncDngrsGoodsStatus 
        { 
            get {
                return _PurgProdCmplncDngrsGoodsStatus;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("PurgProdCmplncDngrsGoodsStatus cannot be null and must have a value.");
                }
                if(value.Length > 1)
                {
                    throw new ValidationException("PurgProdCmplncDngrsGoodsStatus cannot be longer than 1 characters.");
                }
                else
                {
                    _PurgProdCmplncDngrsGoodsStatus = value;
                }
            }
        }
        private string _StockSegment;
        public string StockSegment 
        { 
            get {
                return _StockSegment;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("StockSegment cannot be null and must have a value.");
                }
                if(value.Length > 40)
                {
                    throw new ValidationException("StockSegment cannot be longer than 40 characters.");
                }
                else
                {
                    _StockSegment = value;
                }
            }
        }
        private string _RequirementSegment;
        public string RequirementSegment 
        { 
            get {
                return _RequirementSegment;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("RequirementSegment cannot be null and must have a value.");
                }
                if(value.Length > 40)
                {
                    throw new ValidationException("RequirementSegment cannot be longer than 40 characters.");
                }
                else
                {
                    _RequirementSegment = value;
                }
            }
        }
        public DeferredEnumerable<API_PURCHASEORDER_PROCESS_SRV.A_PurOrdAccountAssignmentType> to_AccountAssignment {get; set;}

        public Deferred<API_PURCHASEORDER_PROCESS_SRV.A_PurchaseOrderType> to_PurchaseOrder {get; set;}


        public DeferredEnumerable<API_PURCHASEORDER_PROCESS_SRV.A_PurchaseOrderItemNoteType> to_PurchaseOrderItemNote {get; set;}

        public DeferredEnumerable<API_PURCHASEORDER_PROCESS_SRV.A_PurOrdPricingElementType> to_PurchaseOrderPricingElement {get; set;}

        public DeferredEnumerable<API_PURCHASEORDER_PROCESS_SRV.A_PurchaseOrderScheduleLineType> to_ScheduleLine {get; set;}

        protected override Dictionary<string, List<string>> ReferenceKeys 
        {   
            get 
            {
                var result = new Dictionary<string, List<string>>();
                result.Add("PrimaryKey", new List<string>() {"PurchaseOrder","PurchaseOrderItem"});
                result.Add("to_AccountAssignment", new List<string>() {"PurchaseOrder","PurchaseOrderItem"});
                result.Add("to_PurchaseOrder", new List<string>() {"PurchaseOrder","PurchaseOrderItem"});
                result.Add("to_PurchaseOrderItemNote", new List<string>() {"PurchaseOrder","PurchaseOrderItem"});
                result.Add("to_PurchaseOrderPricingElement", new List<string>() {"PurchaseOrder","PurchaseOrderItem"});
                result.Add("to_ScheduleLine", new List<string>() {"PurchaseOrder","PurchaseOrderItem"});

                return result;
            }
        }


    }
}
