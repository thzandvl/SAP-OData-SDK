//EntityType AutoGenerated by tool
using Microsoft.Extensions.DependencyInjection;
using System.ComponentModel.DataAnnotations;
using DataOperations.OData; 
using DataOperations; 

namespace API_PURCHASEORDER_PROCESS_SRV
{

    public class A_PurchaseOrderType : BaseDTOWithIDAndETag
    {
        private string _PurchaseOrder;
        public string PurchaseOrder 
        { 
            get {
                return _PurchaseOrder;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("PurchaseOrder cannot be null and must have a value.");
                }
                if(value.Length > 10)
                {
                    throw new ValidationException("PurchaseOrder cannot be longer than 10 characters.");
                }
                else
                {
                    _PurchaseOrder = value;
                }
            }
        }
        private string _CompanyCode;
        public string CompanyCode 
        { 
            get {
                return _CompanyCode;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("CompanyCode cannot be null and must have a value.");
                }
                if(value.Length > 4)
                {
                    throw new ValidationException("CompanyCode cannot be longer than 4 characters.");
                }
                else
                {
                    _CompanyCode = value;
                }
            }
        }
        private string _PurchaseOrderType;
        public string PurchaseOrderType 
        { 
            get {
                return _PurchaseOrderType;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("PurchaseOrderType cannot be null and must have a value.");
                }
                if(value.Length > 4)
                {
                    throw new ValidationException("PurchaseOrderType cannot be longer than 4 characters.");
                }
                else
                {
                    _PurchaseOrderType = value;
                }
            }
        }
        private string _PurchasingDocumentDeletionCode;
        public string PurchasingDocumentDeletionCode 
        { 
            get {
                return _PurchasingDocumentDeletionCode;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("PurchasingDocumentDeletionCode cannot be null and must have a value.");
                }
                if(value.Length > 1)
                {
                    throw new ValidationException("PurchasingDocumentDeletionCode cannot be longer than 1 characters.");
                }
                else
                {
                    _PurchasingDocumentDeletionCode = value;
                }
            }
        }
        private string _PurchasingProcessingStatus;
        public string PurchasingProcessingStatus 
        { 
            get {
                return _PurchasingProcessingStatus;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("PurchasingProcessingStatus cannot be null and must have a value.");
                }
                if(value.Length > 2)
                {
                    throw new ValidationException("PurchasingProcessingStatus cannot be longer than 2 characters.");
                }
                else
                {
                    _PurchasingProcessingStatus = value;
                }
            }
        }
        private string _CreatedByUser;
        public string CreatedByUser 
        { 
            get {
                return _CreatedByUser;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("CreatedByUser cannot be null and must have a value.");
                }
                if(value.Length > 12)
                {
                    throw new ValidationException("CreatedByUser cannot be longer than 12 characters.");
                }
                else
                {
                    _CreatedByUser = value;
                }
            }
        }
        public Edm.Date CreationDate { get; set; }
        public DateTime LastChangeDateTime { get; set; }
        private string _Supplier;
        public string Supplier 
        { 
            get {
                return _Supplier;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("Supplier cannot be null and must have a value.");
                }
                if(value.Length > 10)
                {
                    throw new ValidationException("Supplier cannot be longer than 10 characters.");
                }
                else
                {
                    _Supplier = value;
                }
            }
        }
        private string _PurchaseOrderSubtype;
        public string PurchaseOrderSubtype 
        { 
            get {
                return _PurchaseOrderSubtype;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("PurchaseOrderSubtype cannot be null and must have a value.");
                }
                if(value.Length > 1)
                {
                    throw new ValidationException("PurchaseOrderSubtype cannot be longer than 1 characters.");
                }
                else
                {
                    _PurchaseOrderSubtype = value;
                }
            }
        }
        private string _Language;
        public string Language 
        { 
            get {
                return _Language;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("Language cannot be null and must have a value.");
                }
                if(value.Length > 2)
                {
                    throw new ValidationException("Language cannot be longer than 2 characters.");
                }
                else
                {
                    _Language = value;
                }
            }
        }
        private string _PaymentTerms;
        public string PaymentTerms 
        { 
            get {
                return _PaymentTerms;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("PaymentTerms cannot be null and must have a value.");
                }
                if(value.Length > 4)
                {
                    throw new ValidationException("PaymentTerms cannot be longer than 4 characters.");
                }
                else
                {
                    _PaymentTerms = value;
                }
            }
        }
        public decimal CashDiscount1Days { get; set; }
        public decimal CashDiscount2Days { get; set; }
        public decimal NetPaymentDays { get; set; }
        public decimal CashDiscount1Percent { get; set; }
        public decimal CashDiscount2Percent { get; set; }
        private string _PurchasingOrganization;
        public string PurchasingOrganization 
        { 
            get {
                return _PurchasingOrganization;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("PurchasingOrganization cannot be null and must have a value.");
                }
                if(value.Length > 4)
                {
                    throw new ValidationException("PurchasingOrganization cannot be longer than 4 characters.");
                }
                else
                {
                    _PurchasingOrganization = value;
                }
            }
        }
        private string _PurchasingDocumentOrigin;
        public string PurchasingDocumentOrigin 
        { 
            get {
                return _PurchasingDocumentOrigin;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("PurchasingDocumentOrigin cannot be null and must have a value.");
                }
                if(value.Length > 1)
                {
                    throw new ValidationException("PurchasingDocumentOrigin cannot be longer than 1 characters.");
                }
                else
                {
                    _PurchasingDocumentOrigin = value;
                }
            }
        }
        private string _PurchasingGroup;
        public string PurchasingGroup 
        { 
            get {
                return _PurchasingGroup;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("PurchasingGroup cannot be null and must have a value.");
                }
                if(value.Length > 3)
                {
                    throw new ValidationException("PurchasingGroup cannot be longer than 3 characters.");
                }
                else
                {
                    _PurchasingGroup = value;
                }
            }
        }
        public Edm.Date PurchaseOrderDate { get; set; }
        private string _DocumentCurrency;
        public string DocumentCurrency 
        { 
            get {
                return _DocumentCurrency;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("DocumentCurrency cannot be null and must have a value.");
                }
                if(value.Length > 5)
                {
                    throw new ValidationException("DocumentCurrency cannot be longer than 5 characters.");
                }
                else
                {
                    _DocumentCurrency = value;
                }
            }
        }
        private string _ExchangeRate;
        public string ExchangeRate 
        { 
            get {
                return _ExchangeRate;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("ExchangeRate cannot be null and must have a value.");
                }
                if(value.Length > 12)
                {
                    throw new ValidationException("ExchangeRate cannot be longer than 12 characters.");
                }
                else
                {
                    _ExchangeRate = value;
                }
            }
        }
        public Edm.Boolean ExchangeRateIsFixed { get; set; }
        public Edm.Date ValidityStartDate { get; set; }
        public Edm.Date ValidityEndDate { get; set; }
        private string _SupplierQuotationExternalID;
        public string SupplierQuotationExternalID 
        { 
            get {
                return _SupplierQuotationExternalID;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("SupplierQuotationExternalID cannot be null and must have a value.");
                }
                if(value.Length > 10)
                {
                    throw new ValidationException("SupplierQuotationExternalID cannot be longer than 10 characters.");
                }
                else
                {
                    _SupplierQuotationExternalID = value;
                }
            }
        }
        private string _SupplierRespSalesPersonName;
        public string SupplierRespSalesPersonName 
        { 
            get {
                return _SupplierRespSalesPersonName;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("SupplierRespSalesPersonName cannot be null and must have a value.");
                }
                if(value.Length > 30)
                {
                    throw new ValidationException("SupplierRespSalesPersonName cannot be longer than 30 characters.");
                }
                else
                {
                    _SupplierRespSalesPersonName = value;
                }
            }
        }
        private string _SupplierPhoneNumber;
        public string SupplierPhoneNumber 
        { 
            get {
                return _SupplierPhoneNumber;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("SupplierPhoneNumber cannot be null and must have a value.");
                }
                if(value.Length > 16)
                {
                    throw new ValidationException("SupplierPhoneNumber cannot be longer than 16 characters.");
                }
                else
                {
                    _SupplierPhoneNumber = value;
                }
            }
        }
        private string _SupplyingSupplier;
        public string SupplyingSupplier 
        { 
            get {
                return _SupplyingSupplier;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("SupplyingSupplier cannot be null and must have a value.");
                }
                if(value.Length > 10)
                {
                    throw new ValidationException("SupplyingSupplier cannot be longer than 10 characters.");
                }
                else
                {
                    _SupplyingSupplier = value;
                }
            }
        }
        private string _SupplyingPlant;
        public string SupplyingPlant 
        { 
            get {
                return _SupplyingPlant;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("SupplyingPlant cannot be null and must have a value.");
                }
                if(value.Length > 4)
                {
                    throw new ValidationException("SupplyingPlant cannot be longer than 4 characters.");
                }
                else
                {
                    _SupplyingPlant = value;
                }
            }
        }
        private string _IncotermsClassification;
        public string IncotermsClassification 
        { 
            get {
                return _IncotermsClassification;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("IncotermsClassification cannot be null and must have a value.");
                }
                if(value.Length > 3)
                {
                    throw new ValidationException("IncotermsClassification cannot be longer than 3 characters.");
                }
                else
                {
                    _IncotermsClassification = value;
                }
            }
        }
        private string _CorrespncExternalReference;
        public string CorrespncExternalReference 
        { 
            get {
                return _CorrespncExternalReference;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("CorrespncExternalReference cannot be null and must have a value.");
                }
                if(value.Length > 12)
                {
                    throw new ValidationException("CorrespncExternalReference cannot be longer than 12 characters.");
                }
                else
                {
                    _CorrespncExternalReference = value;
                }
            }
        }
        private string _CorrespncInternalReference;
        public string CorrespncInternalReference 
        { 
            get {
                return _CorrespncInternalReference;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("CorrespncInternalReference cannot be null and must have a value.");
                }
                if(value.Length > 12)
                {
                    throw new ValidationException("CorrespncInternalReference cannot be longer than 12 characters.");
                }
                else
                {
                    _CorrespncInternalReference = value;
                }
            }
        }
        private string _InvoicingParty;
        public string InvoicingParty 
        { 
            get {
                return _InvoicingParty;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("InvoicingParty cannot be null and must have a value.");
                }
                if(value.Length > 10)
                {
                    throw new ValidationException("InvoicingParty cannot be longer than 10 characters.");
                }
                else
                {
                    _InvoicingParty = value;
                }
            }
        }
        public Edm.Boolean ReleaseIsNotCompleted { get; set; }
        public Edm.Boolean PurchasingCompletenessStatus { get; set; }
        private string _IncotermsVersion;
        public string IncotermsVersion 
        { 
            get {
                return _IncotermsVersion;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("IncotermsVersion cannot be null and must have a value.");
                }
                if(value.Length > 4)
                {
                    throw new ValidationException("IncotermsVersion cannot be longer than 4 characters.");
                }
                else
                {
                    _IncotermsVersion = value;
                }
            }
        }
        private string _IncotermsLocation1;
        public string IncotermsLocation1 
        { 
            get {
                return _IncotermsLocation1;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("IncotermsLocation1 cannot be null and must have a value.");
                }
                if(value.Length > 70)
                {
                    throw new ValidationException("IncotermsLocation1 cannot be longer than 70 characters.");
                }
                else
                {
                    _IncotermsLocation1 = value;
                }
            }
        }
        private string _IncotermsLocation2;
        public string IncotermsLocation2 
        { 
            get {
                return _IncotermsLocation2;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("IncotermsLocation2 cannot be null and must have a value.");
                }
                if(value.Length > 70)
                {
                    throw new ValidationException("IncotermsLocation2 cannot be longer than 70 characters.");
                }
                else
                {
                    _IncotermsLocation2 = value;
                }
            }
        }
        private string _ManualSupplierAddressID;
        public string ManualSupplierAddressID 
        { 
            get {
                return _ManualSupplierAddressID;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("ManualSupplierAddressID cannot be null and must have a value.");
                }
                if(value.Length > 10)
                {
                    throw new ValidationException("ManualSupplierAddressID cannot be longer than 10 characters.");
                }
                else
                {
                    _ManualSupplierAddressID = value;
                }
            }
        }
        private string _IsEndOfPurposeBlocked;
        public string IsEndOfPurposeBlocked 
        { 
            get {
                return _IsEndOfPurposeBlocked;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("IsEndOfPurposeBlocked cannot be null and must have a value.");
                }
                if(value.Length > 1)
                {
                    throw new ValidationException("IsEndOfPurposeBlocked cannot be longer than 1 characters.");
                }
                else
                {
                    _IsEndOfPurposeBlocked = value;
                }
            }
        }
        private string _AddressCityName;
        public string AddressCityName 
        { 
            get {
                return _AddressCityName;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("AddressCityName cannot be null and must have a value.");
                }
                if(value.Length > 40)
                {
                    throw new ValidationException("AddressCityName cannot be longer than 40 characters.");
                }
                else
                {
                    _AddressCityName = value;
                }
            }
        }
        private string _AddressFaxNumber;
        public string AddressFaxNumber 
        { 
            get {
                return _AddressFaxNumber;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("AddressFaxNumber cannot be null and must have a value.");
                }
                if(value.Length > 30)
                {
                    throw new ValidationException("AddressFaxNumber cannot be longer than 30 characters.");
                }
                else
                {
                    _AddressFaxNumber = value;
                }
            }
        }
        private string _AddressHouseNumber;
        public string AddressHouseNumber 
        { 
            get {
                return _AddressHouseNumber;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("AddressHouseNumber cannot be null and must have a value.");
                }
                if(value.Length > 10)
                {
                    throw new ValidationException("AddressHouseNumber cannot be longer than 10 characters.");
                }
                else
                {
                    _AddressHouseNumber = value;
                }
            }
        }
        private string _AddressName;
        public string AddressName 
        { 
            get {
                return _AddressName;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("AddressName cannot be null and must have a value.");
                }
                if(value.Length > 40)
                {
                    throw new ValidationException("AddressName cannot be longer than 40 characters.");
                }
                else
                {
                    _AddressName = value;
                }
            }
        }
        private string _AddressPostalCode;
        public string AddressPostalCode 
        { 
            get {
                return _AddressPostalCode;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("AddressPostalCode cannot be null and must have a value.");
                }
                if(value.Length > 10)
                {
                    throw new ValidationException("AddressPostalCode cannot be longer than 10 characters.");
                }
                else
                {
                    _AddressPostalCode = value;
                }
            }
        }
        private string _AddressStreetName;
        public string AddressStreetName 
        { 
            get {
                return _AddressStreetName;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("AddressStreetName cannot be null and must have a value.");
                }
                if(value.Length > 60)
                {
                    throw new ValidationException("AddressStreetName cannot be longer than 60 characters.");
                }
                else
                {
                    _AddressStreetName = value;
                }
            }
        }
        private string _AddressPhoneNumber;
        public string AddressPhoneNumber 
        { 
            get {
                return _AddressPhoneNumber;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("AddressPhoneNumber cannot be null and must have a value.");
                }
                if(value.Length > 30)
                {
                    throw new ValidationException("AddressPhoneNumber cannot be longer than 30 characters.");
                }
                else
                {
                    _AddressPhoneNumber = value;
                }
            }
        }
        private string _AddressRegion;
        public string AddressRegion 
        { 
            get {
                return _AddressRegion;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("AddressRegion cannot be null and must have a value.");
                }
                if(value.Length > 3)
                {
                    throw new ValidationException("AddressRegion cannot be longer than 3 characters.");
                }
                else
                {
                    _AddressRegion = value;
                }
            }
        }
        private string _AddressCountry;
        public string AddressCountry 
        { 
            get {
                return _AddressCountry;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("AddressCountry cannot be null and must have a value.");
                }
                if(value.Length > 3)
                {
                    throw new ValidationException("AddressCountry cannot be longer than 3 characters.");
                }
                else
                {
                    _AddressCountry = value;
                }
            }
        }
        private string _AddressCorrespondenceLanguage;
        public string AddressCorrespondenceLanguage 
        { 
            get {
                return _AddressCorrespondenceLanguage;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("AddressCorrespondenceLanguage cannot be null and must have a value.");
                }
                if(value.Length > 2)
                {
                    throw new ValidationException("AddressCorrespondenceLanguage cannot be longer than 2 characters.");
                }
                else
                {
                    _AddressCorrespondenceLanguage = value;
                }
            }
        }
        private string _PurgAggrgdProdCmplncSuplrSts;
        public string PurgAggrgdProdCmplncSuplrSts 
        { 
            get {
                return _PurgAggrgdProdCmplncSuplrSts;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("PurgAggrgdProdCmplncSuplrSts cannot be null and must have a value.");
                }
                if(value.Length > 1)
                {
                    throw new ValidationException("PurgAggrgdProdCmplncSuplrSts cannot be longer than 1 characters.");
                }
                else
                {
                    _PurgAggrgdProdCmplncSuplrSts = value;
                }
            }
        }
        private string _PurgAggrgdProdMarketabilitySts;
        public string PurgAggrgdProdMarketabilitySts 
        { 
            get {
                return _PurgAggrgdProdMarketabilitySts;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("PurgAggrgdProdMarketabilitySts cannot be null and must have a value.");
                }
                if(value.Length > 1)
                {
                    throw new ValidationException("PurgAggrgdProdMarketabilitySts cannot be longer than 1 characters.");
                }
                else
                {
                    _PurgAggrgdProdMarketabilitySts = value;
                }
            }
        }
        private string _PurgAggrgdSftyDataSheetStatus;
        public string PurgAggrgdSftyDataSheetStatus 
        { 
            get {
                return _PurgAggrgdSftyDataSheetStatus;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("PurgAggrgdSftyDataSheetStatus cannot be null and must have a value.");
                }
                if(value.Length > 1)
                {
                    throw new ValidationException("PurgAggrgdSftyDataSheetStatus cannot be longer than 1 characters.");
                }
                else
                {
                    _PurgAggrgdSftyDataSheetStatus = value;
                }
            }
        }
        private string _PurgProdCmplncTotDngrsGoodsSts;
        public string PurgProdCmplncTotDngrsGoodsSts 
        { 
            get {
                return _PurgProdCmplncTotDngrsGoodsSts;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("PurgProdCmplncTotDngrsGoodsSts cannot be null and must have a value.");
                }
                if(value.Length > 1)
                {
                    throw new ValidationException("PurgProdCmplncTotDngrsGoodsSts cannot be longer than 1 characters.");
                }
                else
                {
                    _PurgProdCmplncTotDngrsGoodsSts = value;
                }
            }
        }
        public DeferredEnumerable<API_PURCHASEORDER_PROCESS_SRV.A_PurchaseOrderItemType> to_PurchaseOrderItem {get; set;}

        public DeferredEnumerable<API_PURCHASEORDER_PROCESS_SRV.A_PurchaseOrderNoteType> to_PurchaseOrderNote {get; set;}

        protected override Dictionary<string, List<string>> ReferenceKeys 
        {   
            get 
            {
                var result = new Dictionary<string, List<string>>();
                result.Add("PrimaryKey", new List<string>() {"PurchaseOrder"});
                result.Add("to_PurchaseOrderItem", new List<string>() {"PurchaseOrder"});
                result.Add("to_PurchaseOrderNote", new List<string>() {"PurchaseOrder"});

                return result;
            }
        }


    }
}
