//EntityType AutoGenerated by tool
using Microsoft.Extensions.DependencyInjection;
using System.ComponentModel.DataAnnotations;
using DataOperations.OData; 
using DataOperations; 

namespace API_PURCHASEORDER_PROCESS_SRV
{

    public class A_PurOrdAccountAssignmentType : BaseDTOWithIDAndETag
    {
        private string _PurchaseOrder;
        public string PurchaseOrder 
        { 
            get {
                return _PurchaseOrder;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("PurchaseOrder cannot be null and must have a value.");
                }
                if(value.Length > 10)
                {
                    throw new ValidationException("PurchaseOrder cannot be longer than 10 characters.");
                }
                else
                {
                    _PurchaseOrder = value;
                }
            }
        }
        private string _PurchaseOrderItem;
        public string PurchaseOrderItem 
        { 
            get {
                return _PurchaseOrderItem;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("PurchaseOrderItem cannot be null and must have a value.");
                }
                if(value.Length > 5)
                {
                    throw new ValidationException("PurchaseOrderItem cannot be longer than 5 characters.");
                }
                else
                {
                    _PurchaseOrderItem = value;
                }
            }
        }
        private string _AccountAssignmentNumber;
        public string AccountAssignmentNumber 
        { 
            get {
                return _AccountAssignmentNumber;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("AccountAssignmentNumber cannot be null and must have a value.");
                }
                if(value.Length > 2)
                {
                    throw new ValidationException("AccountAssignmentNumber cannot be longer than 2 characters.");
                }
                else
                {
                    _AccountAssignmentNumber = value;
                }
            }
        }
        public Edm.Boolean IsDeleted { get; set; }
        private string _PurchaseOrderQuantityUnit;
        public string PurchaseOrderQuantityUnit 
        { 
            get {
                return _PurchaseOrderQuantityUnit;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("PurchaseOrderQuantityUnit cannot be null and must have a value.");
                }
                if(value.Length > 3)
                {
                    throw new ValidationException("PurchaseOrderQuantityUnit cannot be longer than 3 characters.");
                }
                else
                {
                    _PurchaseOrderQuantityUnit = value;
                }
            }
        }
        public decimal Quantity { get; set; }
        public decimal MultipleAcctAssgmtDistrPercent { get; set; }
        private string _DocumentCurrency;
        public string DocumentCurrency 
        { 
            get {
                return _DocumentCurrency;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("DocumentCurrency cannot be null and must have a value.");
                }
                if(value.Length > 5)
                {
                    throw new ValidationException("DocumentCurrency cannot be longer than 5 characters.");
                }
                else
                {
                    _DocumentCurrency = value;
                }
            }
        }
        public decimal PurgDocNetAmount { get; set; }
        private string _GLAccount;
        public string GLAccount 
        { 
            get {
                return _GLAccount;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("GLAccount cannot be null and must have a value.");
                }
                if(value.Length > 10)
                {
                    throw new ValidationException("GLAccount cannot be longer than 10 characters.");
                }
                else
                {
                    _GLAccount = value;
                }
            }
        }
        private string _BusinessArea;
        public string BusinessArea 
        { 
            get {
                return _BusinessArea;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("BusinessArea cannot be null and must have a value.");
                }
                if(value.Length > 4)
                {
                    throw new ValidationException("BusinessArea cannot be longer than 4 characters.");
                }
                else
                {
                    _BusinessArea = value;
                }
            }
        }
        private string _CostCenter;
        public string CostCenter 
        { 
            get {
                return _CostCenter;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("CostCenter cannot be null and must have a value.");
                }
                if(value.Length > 10)
                {
                    throw new ValidationException("CostCenter cannot be longer than 10 characters.");
                }
                else
                {
                    _CostCenter = value;
                }
            }
        }
        private string _SalesOrder;
        public string SalesOrder 
        { 
            get {
                return _SalesOrder;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("SalesOrder cannot be null and must have a value.");
                }
                if(value.Length > 10)
                {
                    throw new ValidationException("SalesOrder cannot be longer than 10 characters.");
                }
                else
                {
                    _SalesOrder = value;
                }
            }
        }
        private string _SalesOrderItem;
        public string SalesOrderItem 
        { 
            get {
                return _SalesOrderItem;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("SalesOrderItem cannot be null and must have a value.");
                }
                if(value.Length > 6)
                {
                    throw new ValidationException("SalesOrderItem cannot be longer than 6 characters.");
                }
                else
                {
                    _SalesOrderItem = value;
                }
            }
        }
        private string _SalesOrderScheduleLine;
        public string SalesOrderScheduleLine 
        { 
            get {
                return _SalesOrderScheduleLine;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("SalesOrderScheduleLine cannot be null and must have a value.");
                }
                if(value.Length > 4)
                {
                    throw new ValidationException("SalesOrderScheduleLine cannot be longer than 4 characters.");
                }
                else
                {
                    _SalesOrderScheduleLine = value;
                }
            }
        }
        private string _MasterFixedAsset;
        public string MasterFixedAsset 
        { 
            get {
                return _MasterFixedAsset;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("MasterFixedAsset cannot be null and must have a value.");
                }
                if(value.Length > 12)
                {
                    throw new ValidationException("MasterFixedAsset cannot be longer than 12 characters.");
                }
                else
                {
                    _MasterFixedAsset = value;
                }
            }
        }
        private string _FixedAsset;
        public string FixedAsset 
        { 
            get {
                return _FixedAsset;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("FixedAsset cannot be null and must have a value.");
                }
                if(value.Length > 4)
                {
                    throw new ValidationException("FixedAsset cannot be longer than 4 characters.");
                }
                else
                {
                    _FixedAsset = value;
                }
            }
        }
        private string _GoodsRecipientName;
        public string GoodsRecipientName 
        { 
            get {
                return _GoodsRecipientName;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("GoodsRecipientName cannot be null and must have a value.");
                }
                if(value.Length > 12)
                {
                    throw new ValidationException("GoodsRecipientName cannot be longer than 12 characters.");
                }
                else
                {
                    _GoodsRecipientName = value;
                }
            }
        }
        private string _UnloadingPointName;
        public string UnloadingPointName 
        { 
            get {
                return _UnloadingPointName;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("UnloadingPointName cannot be null and must have a value.");
                }
                if(value.Length > 25)
                {
                    throw new ValidationException("UnloadingPointName cannot be longer than 25 characters.");
                }
                else
                {
                    _UnloadingPointName = value;
                }
            }
        }
        private string _ControllingArea;
        public string ControllingArea 
        { 
            get {
                return _ControllingArea;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("ControllingArea cannot be null and must have a value.");
                }
                if(value.Length > 4)
                {
                    throw new ValidationException("ControllingArea cannot be longer than 4 characters.");
                }
                else
                {
                    _ControllingArea = value;
                }
            }
        }
        private string _CostObject;
        public string CostObject 
        { 
            get {
                return _CostObject;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("CostObject cannot be null and must have a value.");
                }
                if(value.Length > 12)
                {
                    throw new ValidationException("CostObject cannot be longer than 12 characters.");
                }
                else
                {
                    _CostObject = value;
                }
            }
        }
        private string _OrderID;
        public string OrderID 
        { 
            get {
                return _OrderID;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("OrderID cannot be null and must have a value.");
                }
                if(value.Length > 12)
                {
                    throw new ValidationException("OrderID cannot be longer than 12 characters.");
                }
                else
                {
                    _OrderID = value;
                }
            }
        }
        private string _ProfitCenter;
        public string ProfitCenter 
        { 
            get {
                return _ProfitCenter;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("ProfitCenter cannot be null and must have a value.");
                }
                if(value.Length > 10)
                {
                    throw new ValidationException("ProfitCenter cannot be longer than 10 characters.");
                }
                else
                {
                    _ProfitCenter = value;
                }
            }
        }
        private string _WBSElementInternalID;
        public string WBSElementInternalID 
        { 
            get {
                return _WBSElementInternalID;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("WBSElementInternalID cannot be null and must have a value.");
                }
                if(value.Length > 24)
                {
                    throw new ValidationException("WBSElementInternalID cannot be longer than 24 characters.");
                }
                else
                {
                    _WBSElementInternalID = value;
                }
            }
        }
        private string _WBSElement;
        public string WBSElement 
        { 
            get {
                return _WBSElement;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("WBSElement cannot be null and must have a value.");
                }
                if(value.Length > 24)
                {
                    throw new ValidationException("WBSElement cannot be longer than 24 characters.");
                }
                else
                {
                    _WBSElement = value;
                }
            }
        }
        private string _WBSElementExternalID;
        public string WBSElementExternalID 
        { 
            get {
                return _WBSElementExternalID;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("WBSElementExternalID cannot be null and must have a value.");
                }
                if(value.Length > 24)
                {
                    throw new ValidationException("WBSElementExternalID cannot be longer than 24 characters.");
                }
                else
                {
                    _WBSElementExternalID = value;
                }
            }
        }
        private string _ProjectNetwork;
        public string ProjectNetwork 
        { 
            get {
                return _ProjectNetwork;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("ProjectNetwork cannot be null and must have a value.");
                }
                if(value.Length > 12)
                {
                    throw new ValidationException("ProjectNetwork cannot be longer than 12 characters.");
                }
                else
                {
                    _ProjectNetwork = value;
                }
            }
        }
        private string _RealEstateObject;
        public string RealEstateObject 
        { 
            get {
                return _RealEstateObject;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("RealEstateObject cannot be null and must have a value.");
                }
                if(value.Length > 40)
                {
                    throw new ValidationException("RealEstateObject cannot be longer than 40 characters.");
                }
                else
                {
                    _RealEstateObject = value;
                }
            }
        }
        private string _PartnerAccountNumber;
        public string PartnerAccountNumber 
        { 
            get {
                return _PartnerAccountNumber;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("PartnerAccountNumber cannot be null and must have a value.");
                }
                if(value.Length > 10)
                {
                    throw new ValidationException("PartnerAccountNumber cannot be longer than 10 characters.");
                }
                else
                {
                    _PartnerAccountNumber = value;
                }
            }
        }
        private string _CommitmentItem;
        public string CommitmentItem 
        { 
            get {
                return _CommitmentItem;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("CommitmentItem cannot be null and must have a value.");
                }
                if(value.Length > 24)
                {
                    throw new ValidationException("CommitmentItem cannot be longer than 24 characters.");
                }
                else
                {
                    _CommitmentItem = value;
                }
            }
        }
        private string _JointVentureRecoveryCode;
        public string JointVentureRecoveryCode 
        { 
            get {
                return _JointVentureRecoveryCode;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("JointVentureRecoveryCode cannot be null and must have a value.");
                }
                if(value.Length > 2)
                {
                    throw new ValidationException("JointVentureRecoveryCode cannot be longer than 2 characters.");
                }
                else
                {
                    _JointVentureRecoveryCode = value;
                }
            }
        }
        private string _FundsCenter;
        public string FundsCenter 
        { 
            get {
                return _FundsCenter;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("FundsCenter cannot be null and must have a value.");
                }
                if(value.Length > 16)
                {
                    throw new ValidationException("FundsCenter cannot be longer than 16 characters.");
                }
                else
                {
                    _FundsCenter = value;
                }
            }
        }
        private string _Fund;
        public string Fund 
        { 
            get {
                return _Fund;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("Fund cannot be null and must have a value.");
                }
                if(value.Length > 10)
                {
                    throw new ValidationException("Fund cannot be longer than 10 characters.");
                }
                else
                {
                    _Fund = value;
                }
            }
        }
        private string _FunctionalArea;
        public string FunctionalArea 
        { 
            get {
                return _FunctionalArea;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("FunctionalArea cannot be null and must have a value.");
                }
                if(value.Length > 16)
                {
                    throw new ValidationException("FunctionalArea cannot be longer than 16 characters.");
                }
                else
                {
                    _FunctionalArea = value;
                }
            }
        }
        public Edm.Date SettlementReferenceDate { get; set; }
        private string _TaxCode;
        public string TaxCode 
        { 
            get {
                return _TaxCode;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("TaxCode cannot be null and must have a value.");
                }
                if(value.Length > 2)
                {
                    throw new ValidationException("TaxCode cannot be longer than 2 characters.");
                }
                else
                {
                    _TaxCode = value;
                }
            }
        }
        private string _TaxJurisdiction;
        public string TaxJurisdiction 
        { 
            get {
                return _TaxJurisdiction;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("TaxJurisdiction cannot be null and must have a value.");
                }
                if(value.Length > 15)
                {
                    throw new ValidationException("TaxJurisdiction cannot be longer than 15 characters.");
                }
                else
                {
                    _TaxJurisdiction = value;
                }
            }
        }
        private string _CostCtrActivityType;
        public string CostCtrActivityType 
        { 
            get {
                return _CostCtrActivityType;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("CostCtrActivityType cannot be null and must have a value.");
                }
                if(value.Length > 6)
                {
                    throw new ValidationException("CostCtrActivityType cannot be longer than 6 characters.");
                }
                else
                {
                    _CostCtrActivityType = value;
                }
            }
        }
        private string _BusinessProcess;
        public string BusinessProcess 
        { 
            get {
                return _BusinessProcess;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("BusinessProcess cannot be null and must have a value.");
                }
                if(value.Length > 12)
                {
                    throw new ValidationException("BusinessProcess cannot be longer than 12 characters.");
                }
                else
                {
                    _BusinessProcess = value;
                }
            }
        }
        private string _EarmarkedFundsDocument;
        public string EarmarkedFundsDocument 
        { 
            get {
                return _EarmarkedFundsDocument;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("EarmarkedFundsDocument cannot be null and must have a value.");
                }
                if(value.Length > 10)
                {
                    throw new ValidationException("EarmarkedFundsDocument cannot be longer than 10 characters.");
                }
                else
                {
                    _EarmarkedFundsDocument = value;
                }
            }
        }
        private string _GrantID;
        public string GrantID 
        { 
            get {
                return _GrantID;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("GrantID cannot be null and must have a value.");
                }
                if(value.Length > 20)
                {
                    throw new ValidationException("GrantID cannot be longer than 20 characters.");
                }
                else
                {
                    _GrantID = value;
                }
            }
        }
        private string _BudgetPeriod;
        public string BudgetPeriod 
        { 
            get {
                return _BudgetPeriod;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("BudgetPeriod cannot be null and must have a value.");
                }
                if(value.Length > 10)
                {
                    throw new ValidationException("BudgetPeriod cannot be longer than 10 characters.");
                }
                else
                {
                    _BudgetPeriod = value;
                }
            }
        }
        protected override Dictionary<string, List<string>> ReferenceKeys 
        {   
            get 
            {
                var result = new Dictionary<string, List<string>>();
                result.Add("PrimaryKey", new List<string>() {"PurchaseOrder","PurchaseOrderItem","AccountAssignmentNumber"});

                return result;
            }
        }


    }
}
