//EntityType AutoGenerated by tool
using Microsoft.Extensions.DependencyInjection;
using System.ComponentModel.DataAnnotations;
using DataOperations.OData; 
using DataOperations; 

namespace GWSAMPLE_BASIC
{

    public class Product : BaseDTOWithIDAndETag
    {
        private string _ProductID;
        public string ProductID 
        { 
            get { 
                return _ProductID;
            }
            init {
                _ProductID = value;
            }
        }
        
        private string _TypeCode;
        public string TypeCode 
        { 
            get {
                return _TypeCode;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("TypeCode cannot be null and must have a value.");
                }
                if(value.Length > 2)
                {
                    throw new ValidationException("TypeCode cannot be longer than 2 characters.");
                }
                else
                {
                    _TypeCode = value;
                }
            }
        }
        private string _Category;
        public string Category 
        { 
            get {
                return _Category;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("Category cannot be null and must have a value.");
                }
                if(value.Length > 40)
                {
                    throw new ValidationException("Category cannot be longer than 40 characters.");
                }
                else
                {
                    _Category = value;
                }
            }
        }
        private string _Name;
        public string Name 
        { 
            get {
                return _Name;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("Name cannot be null and must have a value.");
                }
                if(value.Length > 255)
                {
                    throw new ValidationException("Name cannot be longer than 255 characters.");
                }
                else
                {
                    _Name = value;
                }
            }
        }
        private string _NameLanguage;
        public string NameLanguage 
        { 
            get {
                return _NameLanguage;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("NameLanguage cannot be null and must have a value.");
                }
                if(value.Length > 2)
                {
                    throw new ValidationException("NameLanguage cannot be longer than 2 characters.");
                }
                else
                {
                    _NameLanguage = value;
                }
            }
        }
        private string _Description;
        public string Description 
        { 
            get {
                return _Description;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("Description cannot be null and must have a value.");
                }
                if(value.Length > 255)
                {
                    throw new ValidationException("Description cannot be longer than 255 characters.");
                }
                else
                {
                    _Description = value;
                }
            }
        }
        private string _DescriptionLanguage;
        public string DescriptionLanguage 
        { 
            get {
                return _DescriptionLanguage;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("DescriptionLanguage cannot be null and must have a value.");
                }
                if(value.Length > 2)
                {
                    throw new ValidationException("DescriptionLanguage cannot be longer than 2 characters.");
                }
                else
                {
                    _DescriptionLanguage = value;
                }
            }
        }
        private string _SupplierID;
        public string SupplierID 
        { 
            get {
                return _SupplierID;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("SupplierID cannot be null and must have a value.");
                }
                if(value.Length > 10)
                {
                    throw new ValidationException("SupplierID cannot be longer than 10 characters.");
                }
                else
                {
                    _SupplierID = value;
                }
            }
        }
        private string _SupplierName;
        public string SupplierName 
        { 
            get {
                return _SupplierName;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("SupplierName cannot be null and must have a value.");
                }
                if(value.Length > 80)
                {
                    throw new ValidationException("SupplierName cannot be longer than 80 characters.");
                }
                else
                {
                    _SupplierName = value;
                }
            }
        }
        public byte TaxTarifCode { get; set; }
        private string _MeasureUnit;
        public string MeasureUnit 
        { 
            get {
                return _MeasureUnit;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("MeasureUnit cannot be null and must have a value.");
                }
                if(value.Length > 3)
                {
                    throw new ValidationException("MeasureUnit cannot be longer than 3 characters.");
                }
                else
                {
                    _MeasureUnit = value;
                }
            }
        }
        public decimal WeightMeasure { get; set; }
        private string _WeightUnit;
        public string WeightUnit 
        { 
            get {
                return _WeightUnit;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("WeightUnit cannot be null and must have a value.");
                }
                if(value.Length > 3)
                {
                    throw new ValidationException("WeightUnit cannot be longer than 3 characters.");
                }
                else
                {
                    _WeightUnit = value;
                }
            }
        }
        private string _CurrencyCode;
        public string CurrencyCode 
        { 
            get {
                return _CurrencyCode;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("CurrencyCode cannot be null and must have a value.");
                }
                if(value.Length > 5)
                {
                    throw new ValidationException("CurrencyCode cannot be longer than 5 characters.");
                }
                else
                {
                    _CurrencyCode = value;
                }
            }
        }
        public decimal Price { get; set; }
        public decimal Width { get; set; }
        public decimal Depth { get; set; }
        public decimal Height { get; set; }
        private string _DimUnit;
        public string DimUnit 
        { 
            get {
                return _DimUnit;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("DimUnit cannot be null and must have a value.");
                }
                if(value.Length > 3)
                {
                    throw new ValidationException("DimUnit cannot be longer than 3 characters.");
                }
                else
                {
                    _DimUnit = value;
                }
            }
        }
        public DateTime CreatedAt { get; set; }
        public DateTime ChangedAt { get; set; }
        public DeferredEnumerable<GWSAMPLE_BASIC.SalesOrderLineItem> ToSalesOrderLineItems {get; set;}

        public Deferred<GWSAMPLE_BASIC.BusinessPartner> ToSupplier {get; set;}


        protected override Dictionary<string, List<string>> ReferenceKeys 
        {   
            get 
            {
                var result = new Dictionary<string, List<string>>();
                result.Add("PrimaryKey", new List<string>() {"ProductID"});
                result.Add("ToSalesOrderLineItems", new List<string>() {"ProductID"});
                result.Add("ToSupplier", new List<string>() {"BusinessPartnerID|SupplierID"});

                return result;
            }
        }


    }
}
