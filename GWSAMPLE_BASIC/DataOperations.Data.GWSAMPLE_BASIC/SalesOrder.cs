//EntityType AutoGenerated by tool
using Microsoft.Extensions.DependencyInjection;
using System.ComponentModel.DataAnnotations;
using DataOperations.OData; 
using DataOperations; 

namespace GWSAMPLE_BASIC
{

    public class SalesOrder : BaseDTOWithIDAndETag
    {
        private string _SalesOrderID;
        public string SalesOrderID 
        { 
            get {
                return _SalesOrderID;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("SalesOrderID cannot be null and must have a value.");
                }
                if(value.Length > 10)
                {
                    throw new ValidationException("SalesOrderID cannot be longer than 10 characters.");
                }
                else
                {
                    _SalesOrderID = value;
                }
            }
        }
        private string _Note;
        public string Note 
        { 
            get { 
                return _Note;
            }
            init {
                _Note = value;
            }
        }
        
        private string _NoteLanguage;
        public string NoteLanguage 
        { 
            get {
                return _NoteLanguage;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("NoteLanguage cannot be null and must have a value.");
                }
                if(value.Length > 2)
                {
                    throw new ValidationException("NoteLanguage cannot be longer than 2 characters.");
                }
                else
                {
                    _NoteLanguage = value;
                }
            }
        }
        private string _CustomerID;
        public string CustomerID 
        { 
            get { 
                return _CustomerID;
            }
            init {
                _CustomerID = value;
            }
        }
        
        private string _CustomerName;
        public string CustomerName 
        { 
            get {
                return _CustomerName;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("CustomerName cannot be null and must have a value.");
                }
                if(value.Length > 80)
                {
                    throw new ValidationException("CustomerName cannot be longer than 80 characters.");
                }
                else
                {
                    _CustomerName = value;
                }
            }
        }
        private string _CurrencyCode;
        public string CurrencyCode 
        { 
            get { 
                return _CurrencyCode;
            }
            init {
                _CurrencyCode = value;
            }
        }
        
        public decimal GrossAmount { get; set; }
        public decimal NetAmount { get; set; }
        public decimal TaxAmount { get; set; }
        private string _LifecycleStatus;
        public string LifecycleStatus 
        { 
            get {
                return _LifecycleStatus;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("LifecycleStatus cannot be null and must have a value.");
                }
                if(value.Length > 1)
                {
                    throw new ValidationException("LifecycleStatus cannot be longer than 1 characters.");
                }
                else
                {
                    _LifecycleStatus = value;
                }
            }
        }
        private string _LifecycleStatusDescription;
        public string LifecycleStatusDescription 
        { 
            get {
                return _LifecycleStatusDescription;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("LifecycleStatusDescription cannot be null and must have a value.");
                }
                if(value.Length > 60)
                {
                    throw new ValidationException("LifecycleStatusDescription cannot be longer than 60 characters.");
                }
                else
                {
                    _LifecycleStatusDescription = value;
                }
            }
        }
        private string _BillingStatus;
        public string BillingStatus 
        { 
            get {
                return _BillingStatus;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("BillingStatus cannot be null and must have a value.");
                }
                if(value.Length > 1)
                {
                    throw new ValidationException("BillingStatus cannot be longer than 1 characters.");
                }
                else
                {
                    _BillingStatus = value;
                }
            }
        }
        private string _BillingStatusDescription;
        public string BillingStatusDescription 
        { 
            get {
                return _BillingStatusDescription;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("BillingStatusDescription cannot be null and must have a value.");
                }
                if(value.Length > 60)
                {
                    throw new ValidationException("BillingStatusDescription cannot be longer than 60 characters.");
                }
                else
                {
                    _BillingStatusDescription = value;
                }
            }
        }
        private string _DeliveryStatus;
        public string DeliveryStatus 
        { 
            get {
                return _DeliveryStatus;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("DeliveryStatus cannot be null and must have a value.");
                }
                if(value.Length > 1)
                {
                    throw new ValidationException("DeliveryStatus cannot be longer than 1 characters.");
                }
                else
                {
                    _DeliveryStatus = value;
                }
            }
        }
        private string _DeliveryStatusDescription;
        public string DeliveryStatusDescription 
        { 
            get {
                return _DeliveryStatusDescription;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("DeliveryStatusDescription cannot be null and must have a value.");
                }
                if(value.Length > 60)
                {
                    throw new ValidationException("DeliveryStatusDescription cannot be longer than 60 characters.");
                }
                else
                {
                    _DeliveryStatusDescription = value;
                }
            }
        }
        public DateTime CreatedAt { get; set; }
        public DateTime ChangedAt { get; set; }
        public Deferred<GWSAMPLE_BASIC.BusinessPartner> ToBusinessPartner {get; set;}


        public DeferredEnumerable<GWSAMPLE_BASIC.SalesOrderLineItem> ToLineItems {get; set;}

        protected override Dictionary<string, List<string>> ReferenceKeys 
        {   
            get 
            {
                var result = new Dictionary<string, List<string>>();
                result.Add("PrimaryKey", new List<string>() {"SalesOrderID"});
                result.Add("ToBusinessPartner", new List<string>() {"BusinessPartnerID|CustomerID"});
                result.Add("ToLineItems", new List<string>() {"SalesOrderID"});

                return result;
            }
        }


    }
}
