//EntityType AutoGenerated by tool
using Microsoft.Extensions.DependencyInjection;
using System.ComponentModel.DataAnnotations;
using DataOperations.OData; 
using DataOperations; 

namespace GWSAMPLE_BASIC
{

    public class BusinessPartner : BaseDTOWithIDAndETag
    {
        public GWSAMPLE_BASIC.CT_Address Address { get; set; }
        private string _BusinessPartnerID;
        public string BusinessPartnerID 
        { 
            get {
                return _BusinessPartnerID;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("BusinessPartnerID cannot be null and must have a value.");
                }
                if(value.Length > 10)
                {
                    throw new ValidationException("BusinessPartnerID cannot be longer than 10 characters.");
                }
                else
                {
                    _BusinessPartnerID = value;
                }
            }
        }
        private string _CompanyName;
        public string CompanyName 
        { 
            get {
                return _CompanyName;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("CompanyName cannot be null and must have a value.");
                }
                if(value.Length > 80)
                {
                    throw new ValidationException("CompanyName cannot be longer than 80 characters.");
                }
                else
                {
                    _CompanyName = value;
                }
            }
        }
        private string _WebAddress;
        public string WebAddress 
        { 
            get { 
                return _WebAddress;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("WebAddress cannot be null and must have a value.");
                }
                else
                {
                    _WebAddress = value;
                }
            }
        }
        
        private string _EmailAddress;
        public string EmailAddress 
        { 
            get {
                return _EmailAddress;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("EmailAddress cannot be null and must have a value.");
                }
                if(value.Length > 255)
                {
                    throw new ValidationException("EmailAddress cannot be longer than 255 characters.");
                }
                else
                {
                    _EmailAddress = value;
                }
            }
        }
        private string _PhoneNumber;
        public string PhoneNumber 
        { 
            get {
                return _PhoneNumber;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("PhoneNumber cannot be null and must have a value.");
                }
                if(value.Length > 30)
                {
                    throw new ValidationException("PhoneNumber cannot be longer than 30 characters.");
                }
                else
                {
                    _PhoneNumber = value;
                }
            }
        }
        private string _FaxNumber;
        public string FaxNumber 
        { 
            get {
                return _FaxNumber;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("FaxNumber cannot be null and must have a value.");
                }
                if(value.Length > 30)
                {
                    throw new ValidationException("FaxNumber cannot be longer than 30 characters.");
                }
                else
                {
                    _FaxNumber = value;
                }
            }
        }
        private string _LegalForm;
        public string LegalForm 
        { 
            get {
                return _LegalForm;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("LegalForm cannot be null and must have a value.");
                }
                if(value.Length > 10)
                {
                    throw new ValidationException("LegalForm cannot be longer than 10 characters.");
                }
                else
                {
                    _LegalForm = value;
                }
            }
        }
        private string _CurrencyCode;
        public string CurrencyCode 
        { 
            get {
                return _CurrencyCode;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("CurrencyCode cannot be null and must have a value.");
                }
                if(value.Length > 5)
                {
                    throw new ValidationException("CurrencyCode cannot be longer than 5 characters.");
                }
                else
                {
                    _CurrencyCode = value;
                }
            }
        }
        private string _BusinessPartnerRole;
        public string BusinessPartnerRole 
        { 
            get {
                return _BusinessPartnerRole;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("BusinessPartnerRole cannot be null and must have a value.");
                }
                if(value.Length > 3)
                {
                    throw new ValidationException("BusinessPartnerRole cannot be longer than 3 characters.");
                }
                else
                {
                    _BusinessPartnerRole = value;
                }
            }
        }
        public DateTime CreatedAt { get; set; }
        public DateTime ChangedAt { get; set; }
        public DeferredEnumerable<GWSAMPLE_BASIC.SalesOrder> ToSalesOrders {get; set;}

        public DeferredEnumerable<GWSAMPLE_BASIC.Contact> ToContacts {get; set;}

        public DeferredEnumerable<GWSAMPLE_BASIC.Product> ToProducts {get; set;}

        protected override Dictionary<string, List<string>> ReferenceKeys 
        {   
            get 
            {
                var result = new Dictionary<string, List<string>>();
                result.Add("PrimaryKey", new List<string>() {"BusinessPartnerID"});
                result.Add("ToSalesOrders", new List<string>() {"BusinessPartnerID"});
                result.Add("ToContacts", new List<string>() {"BusinessPartnerID"});
                result.Add("ToProducts", new List<string>() {"BusinessPartnerID"});

                return result;
            }
        }


    }
}
