//EntityType AutoGenerated by tool
using Microsoft.Extensions.DependencyInjection;
using System.ComponentModel.DataAnnotations;
using DataOperations.OData; 
using DataOperations; 

namespace GWSAMPLE_BASIC
{

    public class SalesOrderLineItem : BaseDTOWithIDAndETag
    {
        private string _SalesOrderID;
        public string SalesOrderID 
        { 
            get { 
                return _SalesOrderID;
            }
            init {
                _SalesOrderID = value;
            }
        }
        
        private string _ItemPosition;
        public string ItemPosition 
        { 
            get {
                return _ItemPosition;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("ItemPosition cannot be null and must have a value.");
                }
                if(value.Length > 10)
                {
                    throw new ValidationException("ItemPosition cannot be longer than 10 characters.");
                }
                else
                {
                    _ItemPosition = value;
                }
            }
        }
        private string _ProductID;
        public string ProductID 
        { 
            get {
                return _ProductID;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("ProductID cannot be null and must have a value.");
                }
                if(value.Length > 10)
                {
                    throw new ValidationException("ProductID cannot be longer than 10 characters.");
                }
                else
                {
                    _ProductID = value;
                }
            }
        }
        private string _Note;
        public string Note 
        { 
            get {
                return _Note;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("Note cannot be null and must have a value.");
                }
                if(value.Length > 255)
                {
                    throw new ValidationException("Note cannot be longer than 255 characters.");
                }
                else
                {
                    _Note = value;
                }
            }
        }
        private string _NoteLanguage;
        public string NoteLanguage 
        { 
            get {
                return _NoteLanguage;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("NoteLanguage cannot be null and must have a value.");
                }
                if(value.Length > 2)
                {
                    throw new ValidationException("NoteLanguage cannot be longer than 2 characters.");
                }
                else
                {
                    _NoteLanguage = value;
                }
            }
        }
        private string _CurrencyCode;
        public string CurrencyCode 
        { 
            get {
                return _CurrencyCode;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("CurrencyCode cannot be null and must have a value.");
                }
                if(value.Length > 5)
                {
                    throw new ValidationException("CurrencyCode cannot be longer than 5 characters.");
                }
                else
                {
                    _CurrencyCode = value;
                }
            }
        }
        public decimal GrossAmount { get; set; }
        public decimal NetAmount { get; set; }
        public decimal TaxAmount { get; set; }
        public DateTime DeliveryDate { get; set; }
        public decimal Quantity { get; set; }
        private string _QuantityUnit;
        public string QuantityUnit 
        { 
            get {
                return _QuantityUnit;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("QuantityUnit cannot be null and must have a value.");
                }
                if(value.Length > 3)
                {
                    throw new ValidationException("QuantityUnit cannot be longer than 3 characters.");
                }
                else
                {
                    _QuantityUnit = value;
                }
            }
        }
        public Deferred<GWSAMPLE_BASIC.SalesOrder> ToHeader {get; set;}


        public Deferred<GWSAMPLE_BASIC.Product> ToProduct {get; set;}


        protected override Dictionary<string, List<string>> ReferenceKeys 
        {   
            get 
            {
                var result = new Dictionary<string, List<string>>();
                result.Add("PrimaryKey", new List<string>() {"SalesOrderID","ItemPosition"});
                result.Add("ToHeader", new List<string>() {"SalesOrderID|SalesOrderID"});
                result.Add("ToProduct", new List<string>() {"ProductID|ProductID"});

                return result;
            }
        }


    }
}
