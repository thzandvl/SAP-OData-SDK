//EntityType AutoGenerated by tool
using Microsoft.Extensions.DependencyInjection;
using System.ComponentModel.DataAnnotations;
using DataOperations.OData; 
using DataOperations; 

namespace GWSAMPLE_BASIC
{

    public class Contact : BaseDTOWithIDAndETag
    {
        public GWSAMPLE_BASIC.CT_Address Address { get; set; }
        public string ContactGuid { get; set; }
        private string _BusinessPartnerID;
        public string BusinessPartnerID 
        { 
            get { 
                return _BusinessPartnerID;
            }
            init {
                _BusinessPartnerID = value;
            }
        }
        
        private string _Title;
        public string Title 
        { 
            get {
                return _Title;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("Title cannot be null and must have a value.");
                }
                if(value.Length > 10)
                {
                    throw new ValidationException("Title cannot be longer than 10 characters.");
                }
                else
                {
                    _Title = value;
                }
            }
        }
        private string _FirstName;
        public string FirstName 
        { 
            get {
                return _FirstName;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("FirstName cannot be null and must have a value.");
                }
                if(value.Length > 40)
                {
                    throw new ValidationException("FirstName cannot be longer than 40 characters.");
                }
                else
                {
                    _FirstName = value;
                }
            }
        }
        private string _MiddleName;
        public string MiddleName 
        { 
            get {
                return _MiddleName;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("MiddleName cannot be null and must have a value.");
                }
                if(value.Length > 40)
                {
                    throw new ValidationException("MiddleName cannot be longer than 40 characters.");
                }
                else
                {
                    _MiddleName = value;
                }
            }
        }
        private string _LastName;
        public string LastName 
        { 
            get {
                return _LastName;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("LastName cannot be null and must have a value.");
                }
                if(value.Length > 40)
                {
                    throw new ValidationException("LastName cannot be longer than 40 characters.");
                }
                else
                {
                    _LastName = value;
                }
            }
        }
        private string _Nickname;
        public string Nickname 
        { 
            get {
                return _Nickname;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("Nickname cannot be null and must have a value.");
                }
                if(value.Length > 40)
                {
                    throw new ValidationException("Nickname cannot be longer than 40 characters.");
                }
                else
                {
                    _Nickname = value;
                }
            }
        }
        private string _Initials;
        public string Initials 
        { 
            get {
                return _Initials;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("Initials cannot be null and must have a value.");
                }
                if(value.Length > 10)
                {
                    throw new ValidationException("Initials cannot be longer than 10 characters.");
                }
                else
                {
                    _Initials = value;
                }
            }
        }
        private string _Sex;
        public string Sex 
        { 
            get {
                return _Sex;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("Sex cannot be null and must have a value.");
                }
                if(value.Length > 1)
                {
                    throw new ValidationException("Sex cannot be longer than 1 characters.");
                }
                else
                {
                    _Sex = value;
                }
            }
        }
        private string _PhoneNumber;
        public string PhoneNumber 
        { 
            get {
                return _PhoneNumber;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("PhoneNumber cannot be null and must have a value.");
                }
                if(value.Length > 30)
                {
                    throw new ValidationException("PhoneNumber cannot be longer than 30 characters.");
                }
                else
                {
                    _PhoneNumber = value;
                }
            }
        }
        private string _FaxNumber;
        public string FaxNumber 
        { 
            get {
                return _FaxNumber;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("FaxNumber cannot be null and must have a value.");
                }
                if(value.Length > 30)
                {
                    throw new ValidationException("FaxNumber cannot be longer than 30 characters.");
                }
                else
                {
                    _FaxNumber = value;
                }
            }
        }
        private string _EmailAddress;
        public string EmailAddress 
        { 
            get {
                return _EmailAddress;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("EmailAddress cannot be null and must have a value.");
                }
                if(value.Length > 255)
                {
                    throw new ValidationException("EmailAddress cannot be longer than 255 characters.");
                }
                else
                {
                    _EmailAddress = value;
                }
            }
        }
        private string _Language;
        public string Language 
        { 
            get {
                return _Language;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("Language cannot be null and must have a value.");
                }
                if(value.Length > 2)
                {
                    throw new ValidationException("Language cannot be longer than 2 characters.");
                }
                else
                {
                    _Language = value;
                }
            }
        }
        public DateTime DateOfBirth { get; set; }
        public Deferred<GWSAMPLE_BASIC.BusinessPartner> ToBusinessPartner {get; set;}


        protected override Dictionary<string, List<string>> ReferenceKeys 
        {   
            get 
            {
                var result = new Dictionary<string, List<string>>();
                result.Add("PrimaryKey", new List<string>() {"ContactGuid"});
                result.Add("ToBusinessPartner", new List<string>() {"BusinessPartnerID|BusinessPartnerID"});

                return result;
            }
        }


    }
}
