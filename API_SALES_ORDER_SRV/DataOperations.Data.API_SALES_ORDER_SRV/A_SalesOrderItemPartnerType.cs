//EntityType AutoGenerated by tool
using Microsoft.Extensions.DependencyInjection;
using System.ComponentModel.DataAnnotations;
using DataOperations.OData; 
using DataOperations; 

namespace API_SALES_ORDER_SRV
{

    public class A_SalesOrderItemPartnerType : BaseDTOWithIDAndETag
    {
        private string _SalesOrder;
        public string SalesOrder 
        { 
            get {
                return _SalesOrder;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("SalesOrder cannot be null and must have a value.");
                }
                if(value.Length > 10)
                {
                    throw new ValidationException("SalesOrder cannot be longer than 10 characters.");
                }
                else
                {
                    _SalesOrder = value;
                }
            }
        }
        private string _SalesOrderItem;
        public string SalesOrderItem 
        { 
            get {
                return _SalesOrderItem;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("SalesOrderItem cannot be null and must have a value.");
                }
                if(value.Length > 6)
                {
                    throw new ValidationException("SalesOrderItem cannot be longer than 6 characters.");
                }
                else
                {
                    _SalesOrderItem = value;
                }
            }
        }
        private string _PartnerFunction;
        public string PartnerFunction 
        { 
            get {
                return _PartnerFunction;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("PartnerFunction cannot be null and must have a value.");
                }
                if(value.Length > 2)
                {
                    throw new ValidationException("PartnerFunction cannot be longer than 2 characters.");
                }
                else
                {
                    _PartnerFunction = value;
                }
            }
        }
        private string _Customer;
        public string Customer 
        { 
            get {
                return _Customer;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("Customer cannot be null and must have a value.");
                }
                if(value.Length > 10)
                {
                    throw new ValidationException("Customer cannot be longer than 10 characters.");
                }
                else
                {
                    _Customer = value;
                }
            }
        }
        private string _Supplier;
        public string Supplier 
        { 
            get {
                return _Supplier;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("Supplier cannot be null and must have a value.");
                }
                if(value.Length > 10)
                {
                    throw new ValidationException("Supplier cannot be longer than 10 characters.");
                }
                else
                {
                    _Supplier = value;
                }
            }
        }
        private string _Personnel;
        public string Personnel 
        { 
            get {
                return _Personnel;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("Personnel cannot be null and must have a value.");
                }
                if(value.Length > 8)
                {
                    throw new ValidationException("Personnel cannot be longer than 8 characters.");
                }
                else
                {
                    _Personnel = value;
                }
            }
        }
        private string _ContactPerson;
        public string ContactPerson 
        { 
            get {
                return _ContactPerson;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("ContactPerson cannot be null and must have a value.");
                }
                if(value.Length > 10)
                {
                    throw new ValidationException("ContactPerson cannot be longer than 10 characters.");
                }
                else
                {
                    _ContactPerson = value;
                }
            }
        }
        public Deferred<API_SALES_ORDER_SRV.A_SalesOrderType> to_SalesOrder {get; set;}


        public Deferred<API_SALES_ORDER_SRV.A_SalesOrderItemType> to_SalesOrderItem {get; set;}


        protected override Dictionary<string, List<string>> ReferenceKeys 
        {   
            get 
            {
                var result = new Dictionary<string, List<string>>();
                result.Add("PrimaryKey", new List<string>() {"SalesOrder","SalesOrderItem","PartnerFunction"});
                result.Add("to_SalesOrder", new List<string>() {"SalesOrder","SalesOrderItem","PartnerFunction"});
                result.Add("to_SalesOrderItem", new List<string>() {"SalesOrder","SalesOrderItem","PartnerFunction"});

                return result;
            }
        }


    }
}
