//EntityType AutoGenerated by tool
using Microsoft.Extensions.DependencyInjection;
using System.ComponentModel.DataAnnotations;
using DataOperations.OData; 
using DataOperations; 

namespace API_SALES_ORDER_SRV
{

    public class A_SlsOrdPaymentPlanItemDetailsType : BaseDTOWithIDAndETag
    {
        private string _SalesOrder;
        public string SalesOrder 
        { 
            get {
                return _SalesOrder;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("SalesOrder cannot be null and must have a value.");
                }
                if(value.Length > 10)
                {
                    throw new ValidationException("SalesOrder cannot be longer than 10 characters.");
                }
                else
                {
                    _SalesOrder = value;
                }
            }
        }
        private string _PaymentPlanItem;
        public string PaymentPlanItem 
        { 
            get {
                return _PaymentPlanItem;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("PaymentPlanItem cannot be null and must have a value.");
                }
                if(value.Length > 6)
                {
                    throw new ValidationException("PaymentPlanItem cannot be longer than 6 characters.");
                }
                else
                {
                    _PaymentPlanItem = value;
                }
            }
        }
        private string _PaymentPlan;
        public string PaymentPlan 
        { 
            get {
                return _PaymentPlan;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("PaymentPlan cannot be null and must have a value.");
                }
                if(value.Length > 10)
                {
                    throw new ValidationException("PaymentPlan cannot be longer than 10 characters.");
                }
                else
                {
                    _PaymentPlan = value;
                }
            }
        }
        private string _ElectronicPaymentType;
        public string ElectronicPaymentType 
        { 
            get {
                return _ElectronicPaymentType;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("ElectronicPaymentType cannot be null and must have a value.");
                }
                if(value.Length > 4)
                {
                    throw new ValidationException("ElectronicPaymentType cannot be longer than 4 characters.");
                }
                else
                {
                    _ElectronicPaymentType = value;
                }
            }
        }
        private string _ElectronicPayment;
        public string ElectronicPayment 
        { 
            get {
                return _ElectronicPayment;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("ElectronicPayment cannot be null and must have a value.");
                }
                if(value.Length > 25)
                {
                    throw new ValidationException("ElectronicPayment cannot be longer than 25 characters.");
                }
                else
                {
                    _ElectronicPayment = value;
                }
            }
        }
        public Edm.Date EPaytValidityStartDate { get; set; }
        public Edm.Date EPaytValidityEndDate { get; set; }
        private string _ElectronicPaymentHolderName;
        public string ElectronicPaymentHolderName 
        { 
            get {
                return _ElectronicPaymentHolderName;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("ElectronicPaymentHolderName cannot be null and must have a value.");
                }
                if(value.Length > 40)
                {
                    throw new ValidationException("ElectronicPaymentHolderName cannot be longer than 40 characters.");
                }
                else
                {
                    _ElectronicPaymentHolderName = value;
                }
            }
        }
        public decimal AuthorizedAmountInAuthznCrcy { get; set; }
        private string _AuthorizationCurrency;
        public string AuthorizationCurrency 
        { 
            get {
                return _AuthorizationCurrency;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("AuthorizationCurrency cannot be null and must have a value.");
                }
                if(value.Length > 5)
                {
                    throw new ValidationException("AuthorizationCurrency cannot be longer than 5 characters.");
                }
                else
                {
                    _AuthorizationCurrency = value;
                }
            }
        }
        private string _AuthorizationByDigitalPaytSrvc;
        public string AuthorizationByDigitalPaytSrvc 
        { 
            get {
                return _AuthorizationByDigitalPaytSrvc;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("AuthorizationByDigitalPaytSrvc cannot be null and must have a value.");
                }
                if(value.Length > 10)
                {
                    throw new ValidationException("AuthorizationByDigitalPaytSrvc cannot be longer than 10 characters.");
                }
                else
                {
                    _AuthorizationByDigitalPaytSrvc = value;
                }
            }
        }
        private string _AuthorizationByAcquirer;
        public string AuthorizationByAcquirer 
        { 
            get {
                return _AuthorizationByAcquirer;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("AuthorizationByAcquirer cannot be null and must have a value.");
                }
                if(value.Length > 15)
                {
                    throw new ValidationException("AuthorizationByAcquirer cannot be longer than 15 characters.");
                }
                else
                {
                    _AuthorizationByAcquirer = value;
                }
            }
        }
        public Edm.Date AuthorizationDate { get; set; }
        public Edm.TimeOfDay AuthorizationTime { get; set; }
        private string _AuthorizationStatusName;
        public string AuthorizationStatusName 
        { 
            get {
                return _AuthorizationStatusName;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("AuthorizationStatusName cannot be null and must have a value.");
                }
                if(value.Length > 40)
                {
                    throw new ValidationException("AuthorizationStatusName cannot be longer than 40 characters.");
                }
                else
                {
                    _AuthorizationStatusName = value;
                }
            }
        }
        private string _EPaytByDigitalPaymentSrvc;
        public string EPaytByDigitalPaymentSrvc 
        { 
            get {
                return _EPaytByDigitalPaymentSrvc;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("EPaytByDigitalPaymentSrvc cannot be null and must have a value.");
                }
                if(value.Length > 25)
                {
                    throw new ValidationException("EPaytByDigitalPaymentSrvc cannot be longer than 25 characters.");
                }
                else
                {
                    _EPaytByDigitalPaymentSrvc = value;
                }
            }
        }
        private string _ElectronicPaymentCallStatus;
        public string ElectronicPaymentCallStatus 
        { 
            get {
                return _ElectronicPaymentCallStatus;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("ElectronicPaymentCallStatus cannot be null and must have a value.");
                }
                if(value.Length > 1)
                {
                    throw new ValidationException("ElectronicPaymentCallStatus cannot be longer than 1 characters.");
                }
                else
                {
                    _ElectronicPaymentCallStatus = value;
                }
            }
        }
        private string _EPaytAuthorizationResult;
        public string EPaytAuthorizationResult 
        { 
            get {
                return _EPaytAuthorizationResult;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("EPaytAuthorizationResult cannot be null and must have a value.");
                }
                if(value.Length > 1)
                {
                    throw new ValidationException("EPaytAuthorizationResult cannot be longer than 1 characters.");
                }
                else
                {
                    _EPaytAuthorizationResult = value;
                }
            }
        }
        public decimal EPaytToBeAuthorizedAmount { get; set; }
        public Edm.Boolean EPaytAuthorizationIsExpired { get; set; }
        public Edm.Boolean EPaytAmountIsChanged { get; set; }
        public Edm.Boolean PreauthorizationIsRequested { get; set; }
        private string _PaymentServiceProvider;
        public string PaymentServiceProvider 
        { 
            get {
                return _PaymentServiceProvider;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("PaymentServiceProvider cannot be null and must have a value.");
                }
                if(value.Length > 4)
                {
                    throw new ValidationException("PaymentServiceProvider cannot be longer than 4 characters.");
                }
                else
                {
                    _PaymentServiceProvider = value;
                }
            }
        }
        private string _PaymentByPaymentServicePrvdr;
        public string PaymentByPaymentServicePrvdr 
        { 
            get {
                return _PaymentByPaymentServicePrvdr;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("PaymentByPaymentServicePrvdr cannot be null and must have a value.");
                }
                if(value.Length > 40)
                {
                    throw new ValidationException("PaymentByPaymentServicePrvdr cannot be longer than 40 characters.");
                }
                else
                {
                    _PaymentByPaymentServicePrvdr = value;
                }
            }
        }
        private string _TransactionByPaytSrvcPrvdr;
        public string TransactionByPaytSrvcPrvdr 
        { 
            get {
                return _TransactionByPaytSrvcPrvdr;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("TransactionByPaytSrvcPrvdr cannot be null and must have a value.");
                }
                if(value.Length > 40)
                {
                    throw new ValidationException("TransactionByPaytSrvcPrvdr cannot be longer than 40 characters.");
                }
                else
                {
                    _TransactionByPaytSrvcPrvdr = value;
                }
            }
        }
        private string _MerchantByClearingHouse;
        public string MerchantByClearingHouse 
        { 
            get {
                return _MerchantByClearingHouse;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("MerchantByClearingHouse cannot be null and must have a value.");
                }
                if(value.Length > 15)
                {
                    throw new ValidationException("MerchantByClearingHouse cannot be longer than 15 characters.");
                }
                else
                {
                    _MerchantByClearingHouse = value;
                }
            }
        }
        private string _PaymentCardAuthznRelationID;
        public string PaymentCardAuthznRelationID 
        { 
            get {
                return _PaymentCardAuthznRelationID;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("PaymentCardAuthznRelationID cannot be null and must have a value.");
                }
                if(value.Length > 44)
                {
                    throw new ValidationException("PaymentCardAuthznRelationID cannot be longer than 44 characters.");
                }
                else
                {
                    _PaymentCardAuthznRelationID = value;
                }
            }
        }
        public decimal MaximumToBeAuthorizedAmount { get; set; }
        private string _PaytPlnForAuthorizationItem;
        public string PaytPlnForAuthorizationItem 
        { 
            get {
                return _PaytPlnForAuthorizationItem;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("PaytPlnForAuthorizationItem cannot be null and must have a value.");
                }
                if(value.Length > 10)
                {
                    throw new ValidationException("PaytPlnForAuthorizationItem cannot be longer than 10 characters.");
                }
                else
                {
                    _PaytPlnForAuthorizationItem = value;
                }
            }
        }
        private string _PaytPlnItmForAuthorizationItem;
        public string PaytPlnItmForAuthorizationItem 
        { 
            get {
                return _PaytPlnItmForAuthorizationItem;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("PaytPlnItmForAuthorizationItem cannot be null and must have a value.");
                }
                if(value.Length > 6)
                {
                    throw new ValidationException("PaytPlnItmForAuthorizationItem cannot be longer than 6 characters.");
                }
                else
                {
                    _PaytPlnItmForAuthorizationItem = value;
                }
            }
        }
        public Deferred<API_SALES_ORDER_SRV.A_SalesOrderType> to_SalesOrder {get; set;}


        protected override Dictionary<string, List<string>> ReferenceKeys 
        {   
            get 
            {
                var result = new Dictionary<string, List<string>>();
                result.Add("PrimaryKey", new List<string>() {"SalesOrder","PaymentPlanItem"});
                result.Add("to_SalesOrder", new List<string>() {"SalesOrder","PaymentPlanItem"});

                return result;
            }
        }


    }
}
