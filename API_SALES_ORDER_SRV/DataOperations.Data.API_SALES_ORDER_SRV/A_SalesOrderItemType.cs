//EntityType AutoGenerated by tool
using Microsoft.Extensions.DependencyInjection;
using System.ComponentModel.DataAnnotations;
using DataOperations.OData; 
using DataOperations; 

namespace API_SALES_ORDER_SRV
{

    public class A_SalesOrderItemType : BaseDTOWithIDAndETag
    {
        private string _SalesOrder;
        public string SalesOrder 
        { 
            get {
                return _SalesOrder;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("SalesOrder cannot be null and must have a value.");
                }
                if(value.Length > 10)
                {
                    throw new ValidationException("SalesOrder cannot be longer than 10 characters.");
                }
                else
                {
                    _SalesOrder = value;
                }
            }
        }
        private string _SalesOrderItem;
        public string SalesOrderItem 
        { 
            get {
                return _SalesOrderItem;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("SalesOrderItem cannot be null and must have a value.");
                }
                if(value.Length > 6)
                {
                    throw new ValidationException("SalesOrderItem cannot be longer than 6 characters.");
                }
                else
                {
                    _SalesOrderItem = value;
                }
            }
        }
        private string _HigherLevelItem;
        public string HigherLevelItem 
        { 
            get {
                return _HigherLevelItem;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("HigherLevelItem cannot be null and must have a value.");
                }
                if(value.Length > 6)
                {
                    throw new ValidationException("HigherLevelItem cannot be longer than 6 characters.");
                }
                else
                {
                    _HigherLevelItem = value;
                }
            }
        }
        private string _HigherLevelItemUsage;
        public string HigherLevelItemUsage 
        { 
            get {
                return _HigherLevelItemUsage;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("HigherLevelItemUsage cannot be null and must have a value.");
                }
                if(value.Length > 1)
                {
                    throw new ValidationException("HigherLevelItemUsage cannot be longer than 1 characters.");
                }
                else
                {
                    _HigherLevelItemUsage = value;
                }
            }
        }
        private string _SalesOrderItemCategory;
        public string SalesOrderItemCategory 
        { 
            get {
                return _SalesOrderItemCategory;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("SalesOrderItemCategory cannot be null and must have a value.");
                }
                if(value.Length > 4)
                {
                    throw new ValidationException("SalesOrderItemCategory cannot be longer than 4 characters.");
                }
                else
                {
                    _SalesOrderItemCategory = value;
                }
            }
        }
        private string _SalesOrderItemText;
        public string SalesOrderItemText 
        { 
            get {
                return _SalesOrderItemText;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("SalesOrderItemText cannot be null and must have a value.");
                }
                if(value.Length > 40)
                {
                    throw new ValidationException("SalesOrderItemText cannot be longer than 40 characters.");
                }
                else
                {
                    _SalesOrderItemText = value;
                }
            }
        }
        private string _PurchaseOrderByCustomer;
        public string PurchaseOrderByCustomer 
        { 
            get {
                return _PurchaseOrderByCustomer;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("PurchaseOrderByCustomer cannot be null and must have a value.");
                }
                if(value.Length > 35)
                {
                    throw new ValidationException("PurchaseOrderByCustomer cannot be longer than 35 characters.");
                }
                else
                {
                    _PurchaseOrderByCustomer = value;
                }
            }
        }
        private string _PurchaseOrderByShipToParty;
        public string PurchaseOrderByShipToParty 
        { 
            get {
                return _PurchaseOrderByShipToParty;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("PurchaseOrderByShipToParty cannot be null and must have a value.");
                }
                if(value.Length > 35)
                {
                    throw new ValidationException("PurchaseOrderByShipToParty cannot be longer than 35 characters.");
                }
                else
                {
                    _PurchaseOrderByShipToParty = value;
                }
            }
        }
        private string _ExternalItemID;
        public string ExternalItemID 
        { 
            get {
                return _ExternalItemID;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("ExternalItemID cannot be null and must have a value.");
                }
                if(value.Length > 40)
                {
                    throw new ValidationException("ExternalItemID cannot be longer than 40 characters.");
                }
                else
                {
                    _ExternalItemID = value;
                }
            }
        }
        private string _Material;
        public string Material 
        { 
            get {
                return _Material;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("Material cannot be null and must have a value.");
                }
                if(value.Length > 40)
                {
                    throw new ValidationException("Material cannot be longer than 40 characters.");
                }
                else
                {
                    _Material = value;
                }
            }
        }
        private string _MaterialByCustomer;
        public string MaterialByCustomer 
        { 
            get {
                return _MaterialByCustomer;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("MaterialByCustomer cannot be null and must have a value.");
                }
                if(value.Length > 35)
                {
                    throw new ValidationException("MaterialByCustomer cannot be longer than 35 characters.");
                }
                else
                {
                    _MaterialByCustomer = value;
                }
            }
        }
        public Edm.Date PricingDate { get; set; }
        private string _PricingReferenceMaterial;
        public string PricingReferenceMaterial 
        { 
            get {
                return _PricingReferenceMaterial;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("PricingReferenceMaterial cannot be null and must have a value.");
                }
                if(value.Length > 40)
                {
                    throw new ValidationException("PricingReferenceMaterial cannot be longer than 40 characters.");
                }
                else
                {
                    _PricingReferenceMaterial = value;
                }
            }
        }
        public decimal RequestedQuantity { get; set; }
        private string _RequestedQuantityUnit;
        public string RequestedQuantityUnit 
        { 
            get {
                return _RequestedQuantityUnit;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("RequestedQuantityUnit cannot be null and must have a value.");
                }
                if(value.Length > 3)
                {
                    throw new ValidationException("RequestedQuantityUnit cannot be longer than 3 characters.");
                }
                else
                {
                    _RequestedQuantityUnit = value;
                }
            }
        }
        private string _RequestedQuantitySAPUnit;
        public string RequestedQuantitySAPUnit 
        { 
            get {
                return _RequestedQuantitySAPUnit;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("RequestedQuantitySAPUnit cannot be null and must have a value.");
                }
                if(value.Length > 3)
                {
                    throw new ValidationException("RequestedQuantitySAPUnit cannot be longer than 3 characters.");
                }
                else
                {
                    _RequestedQuantitySAPUnit = value;
                }
            }
        }
        private string _RequestedQuantityISOUnit;
        public string RequestedQuantityISOUnit 
        { 
            get {
                return _RequestedQuantityISOUnit;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("RequestedQuantityISOUnit cannot be null and must have a value.");
                }
                if(value.Length > 3)
                {
                    throw new ValidationException("RequestedQuantityISOUnit cannot be longer than 3 characters.");
                }
                else
                {
                    _RequestedQuantityISOUnit = value;
                }
            }
        }
        private string _OrderQuantityUnit;
        public string OrderQuantityUnit 
        { 
            get {
                return _OrderQuantityUnit;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("OrderQuantityUnit cannot be null and must have a value.");
                }
                if(value.Length > 3)
                {
                    throw new ValidationException("OrderQuantityUnit cannot be longer than 3 characters.");
                }
                else
                {
                    _OrderQuantityUnit = value;
                }
            }
        }
        private string _OrderQuantitySAPUnit;
        public string OrderQuantitySAPUnit 
        { 
            get {
                return _OrderQuantitySAPUnit;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("OrderQuantitySAPUnit cannot be null and must have a value.");
                }
                if(value.Length > 3)
                {
                    throw new ValidationException("OrderQuantitySAPUnit cannot be longer than 3 characters.");
                }
                else
                {
                    _OrderQuantitySAPUnit = value;
                }
            }
        }
        private string _OrderQuantityISOUnit;
        public string OrderQuantityISOUnit 
        { 
            get {
                return _OrderQuantityISOUnit;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("OrderQuantityISOUnit cannot be null and must have a value.");
                }
                if(value.Length > 3)
                {
                    throw new ValidationException("OrderQuantityISOUnit cannot be longer than 3 characters.");
                }
                else
                {
                    _OrderQuantityISOUnit = value;
                }
            }
        }
        public decimal ConfdDelivQtyInOrderQtyUnit { get; set; }
        public decimal ItemGrossWeight { get; set; }
        public decimal ItemNetWeight { get; set; }
        private string _ItemWeightUnit;
        public string ItemWeightUnit 
        { 
            get {
                return _ItemWeightUnit;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("ItemWeightUnit cannot be null and must have a value.");
                }
                if(value.Length > 3)
                {
                    throw new ValidationException("ItemWeightUnit cannot be longer than 3 characters.");
                }
                else
                {
                    _ItemWeightUnit = value;
                }
            }
        }
        private string _ItemWeightSAPUnit;
        public string ItemWeightSAPUnit 
        { 
            get {
                return _ItemWeightSAPUnit;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("ItemWeightSAPUnit cannot be null and must have a value.");
                }
                if(value.Length > 3)
                {
                    throw new ValidationException("ItemWeightSAPUnit cannot be longer than 3 characters.");
                }
                else
                {
                    _ItemWeightSAPUnit = value;
                }
            }
        }
        private string _ItemWeightISOUnit;
        public string ItemWeightISOUnit 
        { 
            get {
                return _ItemWeightISOUnit;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("ItemWeightISOUnit cannot be null and must have a value.");
                }
                if(value.Length > 3)
                {
                    throw new ValidationException("ItemWeightISOUnit cannot be longer than 3 characters.");
                }
                else
                {
                    _ItemWeightISOUnit = value;
                }
            }
        }
        public decimal ItemVolume { get; set; }
        private string _ItemVolumeUnit;
        public string ItemVolumeUnit 
        { 
            get {
                return _ItemVolumeUnit;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("ItemVolumeUnit cannot be null and must have a value.");
                }
                if(value.Length > 3)
                {
                    throw new ValidationException("ItemVolumeUnit cannot be longer than 3 characters.");
                }
                else
                {
                    _ItemVolumeUnit = value;
                }
            }
        }
        private string _ItemVolumeSAPUnit;
        public string ItemVolumeSAPUnit 
        { 
            get {
                return _ItemVolumeSAPUnit;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("ItemVolumeSAPUnit cannot be null and must have a value.");
                }
                if(value.Length > 3)
                {
                    throw new ValidationException("ItemVolumeSAPUnit cannot be longer than 3 characters.");
                }
                else
                {
                    _ItemVolumeSAPUnit = value;
                }
            }
        }
        private string _ItemVolumeISOUnit;
        public string ItemVolumeISOUnit 
        { 
            get {
                return _ItemVolumeISOUnit;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("ItemVolumeISOUnit cannot be null and must have a value.");
                }
                if(value.Length > 3)
                {
                    throw new ValidationException("ItemVolumeISOUnit cannot be longer than 3 characters.");
                }
                else
                {
                    _ItemVolumeISOUnit = value;
                }
            }
        }
        private string _TransactionCurrency;
        public string TransactionCurrency 
        { 
            get {
                return _TransactionCurrency;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("TransactionCurrency cannot be null and must have a value.");
                }
                if(value.Length > 5)
                {
                    throw new ValidationException("TransactionCurrency cannot be longer than 5 characters.");
                }
                else
                {
                    _TransactionCurrency = value;
                }
            }
        }
        public decimal NetAmount { get; set; }
        private string _TotalSDDocReferenceStatus;
        public string TotalSDDocReferenceStatus 
        { 
            get {
                return _TotalSDDocReferenceStatus;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("TotalSDDocReferenceStatus cannot be null and must have a value.");
                }
                if(value.Length > 1)
                {
                    throw new ValidationException("TotalSDDocReferenceStatus cannot be longer than 1 characters.");
                }
                else
                {
                    _TotalSDDocReferenceStatus = value;
                }
            }
        }
        private string _SDDocReferenceStatus;
        public string SDDocReferenceStatus 
        { 
            get {
                return _SDDocReferenceStatus;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("SDDocReferenceStatus cannot be null and must have a value.");
                }
                if(value.Length > 1)
                {
                    throw new ValidationException("SDDocReferenceStatus cannot be longer than 1 characters.");
                }
                else
                {
                    _SDDocReferenceStatus = value;
                }
            }
        }
        private string _MaterialSubstitutionReason;
        public string MaterialSubstitutionReason 
        { 
            get {
                return _MaterialSubstitutionReason;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("MaterialSubstitutionReason cannot be null and must have a value.");
                }
                if(value.Length > 4)
                {
                    throw new ValidationException("MaterialSubstitutionReason cannot be longer than 4 characters.");
                }
                else
                {
                    _MaterialSubstitutionReason = value;
                }
            }
        }
        private string _MaterialGroup;
        public string MaterialGroup 
        { 
            get {
                return _MaterialGroup;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("MaterialGroup cannot be null and must have a value.");
                }
                if(value.Length > 9)
                {
                    throw new ValidationException("MaterialGroup cannot be longer than 9 characters.");
                }
                else
                {
                    _MaterialGroup = value;
                }
            }
        }
        private string _MaterialPricingGroup;
        public string MaterialPricingGroup 
        { 
            get {
                return _MaterialPricingGroup;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("MaterialPricingGroup cannot be null and must have a value.");
                }
                if(value.Length > 2)
                {
                    throw new ValidationException("MaterialPricingGroup cannot be longer than 2 characters.");
                }
                else
                {
                    _MaterialPricingGroup = value;
                }
            }
        }
        private string _AdditionalMaterialGroup1;
        public string AdditionalMaterialGroup1 
        { 
            get {
                return _AdditionalMaterialGroup1;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("AdditionalMaterialGroup1 cannot be null and must have a value.");
                }
                if(value.Length > 3)
                {
                    throw new ValidationException("AdditionalMaterialGroup1 cannot be longer than 3 characters.");
                }
                else
                {
                    _AdditionalMaterialGroup1 = value;
                }
            }
        }
        private string _AdditionalMaterialGroup2;
        public string AdditionalMaterialGroup2 
        { 
            get {
                return _AdditionalMaterialGroup2;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("AdditionalMaterialGroup2 cannot be null and must have a value.");
                }
                if(value.Length > 3)
                {
                    throw new ValidationException("AdditionalMaterialGroup2 cannot be longer than 3 characters.");
                }
                else
                {
                    _AdditionalMaterialGroup2 = value;
                }
            }
        }
        private string _AdditionalMaterialGroup3;
        public string AdditionalMaterialGroup3 
        { 
            get {
                return _AdditionalMaterialGroup3;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("AdditionalMaterialGroup3 cannot be null and must have a value.");
                }
                if(value.Length > 3)
                {
                    throw new ValidationException("AdditionalMaterialGroup3 cannot be longer than 3 characters.");
                }
                else
                {
                    _AdditionalMaterialGroup3 = value;
                }
            }
        }
        private string _AdditionalMaterialGroup4;
        public string AdditionalMaterialGroup4 
        { 
            get {
                return _AdditionalMaterialGroup4;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("AdditionalMaterialGroup4 cannot be null and must have a value.");
                }
                if(value.Length > 3)
                {
                    throw new ValidationException("AdditionalMaterialGroup4 cannot be longer than 3 characters.");
                }
                else
                {
                    _AdditionalMaterialGroup4 = value;
                }
            }
        }
        private string _AdditionalMaterialGroup5;
        public string AdditionalMaterialGroup5 
        { 
            get {
                return _AdditionalMaterialGroup5;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("AdditionalMaterialGroup5 cannot be null and must have a value.");
                }
                if(value.Length > 3)
                {
                    throw new ValidationException("AdditionalMaterialGroup5 cannot be longer than 3 characters.");
                }
                else
                {
                    _AdditionalMaterialGroup5 = value;
                }
            }
        }
        public Edm.Date BillingDocumentDate { get; set; }
        private string _ContractAccount;
        public string ContractAccount 
        { 
            get {
                return _ContractAccount;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("ContractAccount cannot be null and must have a value.");
                }
                if(value.Length > 12)
                {
                    throw new ValidationException("ContractAccount cannot be longer than 12 characters.");
                }
                else
                {
                    _ContractAccount = value;
                }
            }
        }
        private string _AdditionalValueDays;
        public string AdditionalValueDays 
        { 
            get {
                return _AdditionalValueDays;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("AdditionalValueDays cannot be null and must have a value.");
                }
                if(value.Length > 2)
                {
                    throw new ValidationException("AdditionalValueDays cannot be longer than 2 characters.");
                }
                else
                {
                    _AdditionalValueDays = value;
                }
            }
        }
        public Edm.Date ServicesRenderedDate { get; set; }
        private string _Batch;
        public string Batch 
        { 
            get {
                return _Batch;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("Batch cannot be null and must have a value.");
                }
                if(value.Length > 10)
                {
                    throw new ValidationException("Batch cannot be longer than 10 characters.");
                }
                else
                {
                    _Batch = value;
                }
            }
        }
        private string _ProductionPlant;
        public string ProductionPlant 
        { 
            get {
                return _ProductionPlant;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("ProductionPlant cannot be null and must have a value.");
                }
                if(value.Length > 4)
                {
                    throw new ValidationException("ProductionPlant cannot be longer than 4 characters.");
                }
                else
                {
                    _ProductionPlant = value;
                }
            }
        }
        private string _StorageLocation;
        public string StorageLocation 
        { 
            get {
                return _StorageLocation;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("StorageLocation cannot be null and must have a value.");
                }
                if(value.Length > 4)
                {
                    throw new ValidationException("StorageLocation cannot be longer than 4 characters.");
                }
                else
                {
                    _StorageLocation = value;
                }
            }
        }
        private string _DeliveryGroup;
        public string DeliveryGroup 
        { 
            get {
                return _DeliveryGroup;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("DeliveryGroup cannot be null and must have a value.");
                }
                if(value.Length > 3)
                {
                    throw new ValidationException("DeliveryGroup cannot be longer than 3 characters.");
                }
                else
                {
                    _DeliveryGroup = value;
                }
            }
        }
        private string _ShippingPoint;
        public string ShippingPoint 
        { 
            get {
                return _ShippingPoint;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("ShippingPoint cannot be null and must have a value.");
                }
                if(value.Length > 4)
                {
                    throw new ValidationException("ShippingPoint cannot be longer than 4 characters.");
                }
                else
                {
                    _ShippingPoint = value;
                }
            }
        }
        private string _ShippingType;
        public string ShippingType 
        { 
            get {
                return _ShippingType;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("ShippingType cannot be null and must have a value.");
                }
                if(value.Length > 2)
                {
                    throw new ValidationException("ShippingType cannot be longer than 2 characters.");
                }
                else
                {
                    _ShippingType = value;
                }
            }
        }
        private string _DeliveryPriority;
        public string DeliveryPriority 
        { 
            get {
                return _DeliveryPriority;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("DeliveryPriority cannot be null and must have a value.");
                }
                if(value.Length > 2)
                {
                    throw new ValidationException("DeliveryPriority cannot be longer than 2 characters.");
                }
                else
                {
                    _DeliveryPriority = value;
                }
            }
        }
        private string _DeliveryDateTypeRule;
        public string DeliveryDateTypeRule 
        { 
            get {
                return _DeliveryDateTypeRule;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("DeliveryDateTypeRule cannot be null and must have a value.");
                }
                if(value.Length > 1)
                {
                    throw new ValidationException("DeliveryDateTypeRule cannot be longer than 1 characters.");
                }
                else
                {
                    _DeliveryDateTypeRule = value;
                }
            }
        }
        private string _IncotermsClassification;
        public string IncotermsClassification 
        { 
            get {
                return _IncotermsClassification;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("IncotermsClassification cannot be null and must have a value.");
                }
                if(value.Length > 3)
                {
                    throw new ValidationException("IncotermsClassification cannot be longer than 3 characters.");
                }
                else
                {
                    _IncotermsClassification = value;
                }
            }
        }
        private string _IncotermsTransferLocation;
        public string IncotermsTransferLocation 
        { 
            get {
                return _IncotermsTransferLocation;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("IncotermsTransferLocation cannot be null and must have a value.");
                }
                if(value.Length > 28)
                {
                    throw new ValidationException("IncotermsTransferLocation cannot be longer than 28 characters.");
                }
                else
                {
                    _IncotermsTransferLocation = value;
                }
            }
        }
        private string _IncotermsLocation1;
        public string IncotermsLocation1 
        { 
            get {
                return _IncotermsLocation1;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("IncotermsLocation1 cannot be null and must have a value.");
                }
                if(value.Length > 70)
                {
                    throw new ValidationException("IncotermsLocation1 cannot be longer than 70 characters.");
                }
                else
                {
                    _IncotermsLocation1 = value;
                }
            }
        }
        private string _IncotermsLocation2;
        public string IncotermsLocation2 
        { 
            get {
                return _IncotermsLocation2;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("IncotermsLocation2 cannot be null and must have a value.");
                }
                if(value.Length > 70)
                {
                    throw new ValidationException("IncotermsLocation2 cannot be longer than 70 characters.");
                }
                else
                {
                    _IncotermsLocation2 = value;
                }
            }
        }
        private string _ProductTaxClassification1;
        public string ProductTaxClassification1 
        { 
            get {
                return _ProductTaxClassification1;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("ProductTaxClassification1 cannot be null and must have a value.");
                }
                if(value.Length > 1)
                {
                    throw new ValidationException("ProductTaxClassification1 cannot be longer than 1 characters.");
                }
                else
                {
                    _ProductTaxClassification1 = value;
                }
            }
        }
        private string _ProductTaxClassification2;
        public string ProductTaxClassification2 
        { 
            get {
                return _ProductTaxClassification2;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("ProductTaxClassification2 cannot be null and must have a value.");
                }
                if(value.Length > 1)
                {
                    throw new ValidationException("ProductTaxClassification2 cannot be longer than 1 characters.");
                }
                else
                {
                    _ProductTaxClassification2 = value;
                }
            }
        }
        private string _ProductTaxClassification3;
        public string ProductTaxClassification3 
        { 
            get {
                return _ProductTaxClassification3;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("ProductTaxClassification3 cannot be null and must have a value.");
                }
                if(value.Length > 1)
                {
                    throw new ValidationException("ProductTaxClassification3 cannot be longer than 1 characters.");
                }
                else
                {
                    _ProductTaxClassification3 = value;
                }
            }
        }
        private string _ProductTaxClassification4;
        public string ProductTaxClassification4 
        { 
            get {
                return _ProductTaxClassification4;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("ProductTaxClassification4 cannot be null and must have a value.");
                }
                if(value.Length > 1)
                {
                    throw new ValidationException("ProductTaxClassification4 cannot be longer than 1 characters.");
                }
                else
                {
                    _ProductTaxClassification4 = value;
                }
            }
        }
        private string _ProductTaxClassification5;
        public string ProductTaxClassification5 
        { 
            get {
                return _ProductTaxClassification5;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("ProductTaxClassification5 cannot be null and must have a value.");
                }
                if(value.Length > 1)
                {
                    throw new ValidationException("ProductTaxClassification5 cannot be longer than 1 characters.");
                }
                else
                {
                    _ProductTaxClassification5 = value;
                }
            }
        }
        private string _ProductTaxClassification6;
        public string ProductTaxClassification6 
        { 
            get {
                return _ProductTaxClassification6;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("ProductTaxClassification6 cannot be null and must have a value.");
                }
                if(value.Length > 1)
                {
                    throw new ValidationException("ProductTaxClassification6 cannot be longer than 1 characters.");
                }
                else
                {
                    _ProductTaxClassification6 = value;
                }
            }
        }
        private string _ProductTaxClassification7;
        public string ProductTaxClassification7 
        { 
            get {
                return _ProductTaxClassification7;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("ProductTaxClassification7 cannot be null and must have a value.");
                }
                if(value.Length > 1)
                {
                    throw new ValidationException("ProductTaxClassification7 cannot be longer than 1 characters.");
                }
                else
                {
                    _ProductTaxClassification7 = value;
                }
            }
        }
        private string _ProductTaxClassification8;
        public string ProductTaxClassification8 
        { 
            get {
                return _ProductTaxClassification8;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("ProductTaxClassification8 cannot be null and must have a value.");
                }
                if(value.Length > 1)
                {
                    throw new ValidationException("ProductTaxClassification8 cannot be longer than 1 characters.");
                }
                else
                {
                    _ProductTaxClassification8 = value;
                }
            }
        }
        private string _ProductTaxClassification9;
        public string ProductTaxClassification9 
        { 
            get {
                return _ProductTaxClassification9;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("ProductTaxClassification9 cannot be null and must have a value.");
                }
                if(value.Length > 1)
                {
                    throw new ValidationException("ProductTaxClassification9 cannot be longer than 1 characters.");
                }
                else
                {
                    _ProductTaxClassification9 = value;
                }
            }
        }
        private string _MatlAccountAssignmentGroup;
        public string MatlAccountAssignmentGroup 
        { 
            get {
                return _MatlAccountAssignmentGroup;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("MatlAccountAssignmentGroup cannot be null and must have a value.");
                }
                if(value.Length > 2)
                {
                    throw new ValidationException("MatlAccountAssignmentGroup cannot be longer than 2 characters.");
                }
                else
                {
                    _MatlAccountAssignmentGroup = value;
                }
            }
        }
        private string _CustomerPaymentTerms;
        public string CustomerPaymentTerms 
        { 
            get {
                return _CustomerPaymentTerms;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("CustomerPaymentTerms cannot be null and must have a value.");
                }
                if(value.Length > 4)
                {
                    throw new ValidationException("CustomerPaymentTerms cannot be longer than 4 characters.");
                }
                else
                {
                    _CustomerPaymentTerms = value;
                }
            }
        }
        public Edm.Date FixedValueDate { get; set; }
        private string _CustomerGroup;
        public string CustomerGroup 
        { 
            get {
                return _CustomerGroup;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("CustomerGroup cannot be null and must have a value.");
                }
                if(value.Length > 2)
                {
                    throw new ValidationException("CustomerGroup cannot be longer than 2 characters.");
                }
                else
                {
                    _CustomerGroup = value;
                }
            }
        }
        private string _SalesDocumentRjcnReason;
        public string SalesDocumentRjcnReason 
        { 
            get {
                return _SalesDocumentRjcnReason;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("SalesDocumentRjcnReason cannot be null and must have a value.");
                }
                if(value.Length > 2)
                {
                    throw new ValidationException("SalesDocumentRjcnReason cannot be longer than 2 characters.");
                }
                else
                {
                    _SalesDocumentRjcnReason = value;
                }
            }
        }
        private string _ItemBillingBlockReason;
        public string ItemBillingBlockReason 
        { 
            get {
                return _ItemBillingBlockReason;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("ItemBillingBlockReason cannot be null and must have a value.");
                }
                if(value.Length > 2)
                {
                    throw new ValidationException("ItemBillingBlockReason cannot be longer than 2 characters.");
                }
                else
                {
                    _ItemBillingBlockReason = value;
                }
            }
        }
        public Edm.Boolean SlsDocIsRlvtForProofOfDeliv { get; set; }
        private string _WBSElement;
        public string WBSElement 
        { 
            get {
                return _WBSElement;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("WBSElement cannot be null and must have a value.");
                }
                if(value.Length > 24)
                {
                    throw new ValidationException("WBSElement cannot be longer than 24 characters.");
                }
                else
                {
                    _WBSElement = value;
                }
            }
        }
        private string _ProfitCenter;
        public string ProfitCenter 
        { 
            get {
                return _ProfitCenter;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("ProfitCenter cannot be null and must have a value.");
                }
                if(value.Length > 10)
                {
                    throw new ValidationException("ProfitCenter cannot be longer than 10 characters.");
                }
                else
                {
                    _ProfitCenter = value;
                }
            }
        }
        public decimal AccountingExchangeRate { get; set; }
        private string _ReferenceSDDocument;
        public string ReferenceSDDocument 
        { 
            get {
                return _ReferenceSDDocument;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("ReferenceSDDocument cannot be null and must have a value.");
                }
                if(value.Length > 10)
                {
                    throw new ValidationException("ReferenceSDDocument cannot be longer than 10 characters.");
                }
                else
                {
                    _ReferenceSDDocument = value;
                }
            }
        }
        private string _ReferenceSDDocumentItem;
        public string ReferenceSDDocumentItem 
        { 
            get {
                return _ReferenceSDDocumentItem;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("ReferenceSDDocumentItem cannot be null and must have a value.");
                }
                if(value.Length > 6)
                {
                    throw new ValidationException("ReferenceSDDocumentItem cannot be longer than 6 characters.");
                }
                else
                {
                    _ReferenceSDDocumentItem = value;
                }
            }
        }
        private string _SDProcessStatus;
        public string SDProcessStatus 
        { 
            get {
                return _SDProcessStatus;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("SDProcessStatus cannot be null and must have a value.");
                }
                if(value.Length > 1)
                {
                    throw new ValidationException("SDProcessStatus cannot be longer than 1 characters.");
                }
                else
                {
                    _SDProcessStatus = value;
                }
            }
        }
        private string _DeliveryStatus;
        public string DeliveryStatus 
        { 
            get {
                return _DeliveryStatus;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("DeliveryStatus cannot be null and must have a value.");
                }
                if(value.Length > 1)
                {
                    throw new ValidationException("DeliveryStatus cannot be longer than 1 characters.");
                }
                else
                {
                    _DeliveryStatus = value;
                }
            }
        }
        private string _OrderRelatedBillingStatus;
        public string OrderRelatedBillingStatus 
        { 
            get {
                return _OrderRelatedBillingStatus;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("OrderRelatedBillingStatus cannot be null and must have a value.");
                }
                if(value.Length > 1)
                {
                    throw new ValidationException("OrderRelatedBillingStatus cannot be longer than 1 characters.");
                }
                else
                {
                    _OrderRelatedBillingStatus = value;
                }
            }
        }
        private string _RequirementSegment;
        public string RequirementSegment 
        { 
            get {
                return _RequirementSegment;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("RequirementSegment cannot be null and must have a value.");
                }
                if(value.Length > 40)
                {
                    throw new ValidationException("RequirementSegment cannot be longer than 40 characters.");
                }
                else
                {
                    _RequirementSegment = value;
                }
            }
        }
        public DeferredEnumerable<API_SALES_ORDER_SRV.A_SalesOrderItemPartnerType> to_Partner {get; set;}

        public DeferredEnumerable<API_SALES_ORDER_SRV.A_SalesOrderItemPrElementType> to_PricingElement {get; set;}

        public DeferredEnumerable<API_SALES_ORDER_SRV.A_SalesOrderItemRelatedObjectType> to_RelatedObject {get; set;}

        public Deferred<API_SALES_ORDER_SRV.A_SalesOrderType> to_SalesOrder {get; set;}


        public DeferredEnumerable<API_SALES_ORDER_SRV.A_SalesOrderScheduleLineType> to_ScheduleLine {get; set;}

        public DeferredEnumerable<API_SALES_ORDER_SRV.A_SalesOrderItemTextType> to_Text {get; set;}

        protected override Dictionary<string, List<string>> ReferenceKeys 
        {   
            get 
            {
                var result = new Dictionary<string, List<string>>();
                result.Add("PrimaryKey", new List<string>() {"SalesOrder","SalesOrderItem"});
                result.Add("to_Partner", new List<string>() {"SalesOrder","SalesOrderItem"});
                result.Add("to_PricingElement", new List<string>() {"SalesOrder","SalesOrderItem"});
                result.Add("to_RelatedObject", new List<string>() {"SalesOrder","SalesOrderItem"});
                result.Add("to_SalesOrder", new List<string>() {"SalesOrder","SalesOrderItem"});
                result.Add("to_ScheduleLine", new List<string>() {"SalesOrder","SalesOrderItem"});
                result.Add("to_Text", new List<string>() {"SalesOrder","SalesOrderItem"});

                return result;
            }
        }


    }
}
