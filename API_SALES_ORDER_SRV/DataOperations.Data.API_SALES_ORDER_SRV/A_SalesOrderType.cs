//EntityType AutoGenerated by tool
using Microsoft.Extensions.DependencyInjection;
using System.ComponentModel.DataAnnotations;
using DataOperations.OData; 
using DataOperations; 

namespace API_SALES_ORDER_SRV
{

    public class A_SalesOrderType : BaseDTOWithIDAndETag
    {
        private string _SalesOrder;
        public string SalesOrder 
        { 
            get {
                return _SalesOrder;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("SalesOrder cannot be null and must have a value.");
                }
                if(value.Length > 10)
                {
                    throw new ValidationException("SalesOrder cannot be longer than 10 characters.");
                }
                else
                {
                    _SalesOrder = value;
                }
            }
        }
        private string _SalesOrderType;
        public string SalesOrderType 
        { 
            get {
                return _SalesOrderType;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("SalesOrderType cannot be null and must have a value.");
                }
                if(value.Length > 4)
                {
                    throw new ValidationException("SalesOrderType cannot be longer than 4 characters.");
                }
                else
                {
                    _SalesOrderType = value;
                }
            }
        }
        private string _SalesOrganization;
        public string SalesOrganization 
        { 
            get {
                return _SalesOrganization;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("SalesOrganization cannot be null and must have a value.");
                }
                if(value.Length > 4)
                {
                    throw new ValidationException("SalesOrganization cannot be longer than 4 characters.");
                }
                else
                {
                    _SalesOrganization = value;
                }
            }
        }
        private string _DistributionChannel;
        public string DistributionChannel 
        { 
            get {
                return _DistributionChannel;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("DistributionChannel cannot be null and must have a value.");
                }
                if(value.Length > 2)
                {
                    throw new ValidationException("DistributionChannel cannot be longer than 2 characters.");
                }
                else
                {
                    _DistributionChannel = value;
                }
            }
        }
        private string _OrganizationDivision;
        public string OrganizationDivision 
        { 
            get {
                return _OrganizationDivision;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("OrganizationDivision cannot be null and must have a value.");
                }
                if(value.Length > 2)
                {
                    throw new ValidationException("OrganizationDivision cannot be longer than 2 characters.");
                }
                else
                {
                    _OrganizationDivision = value;
                }
            }
        }
        private string _SalesGroup;
        public string SalesGroup 
        { 
            get {
                return _SalesGroup;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("SalesGroup cannot be null and must have a value.");
                }
                if(value.Length > 3)
                {
                    throw new ValidationException("SalesGroup cannot be longer than 3 characters.");
                }
                else
                {
                    _SalesGroup = value;
                }
            }
        }
        private string _SalesOffice;
        public string SalesOffice 
        { 
            get {
                return _SalesOffice;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("SalesOffice cannot be null and must have a value.");
                }
                if(value.Length > 4)
                {
                    throw new ValidationException("SalesOffice cannot be longer than 4 characters.");
                }
                else
                {
                    _SalesOffice = value;
                }
            }
        }
        private string _SalesDistrict;
        public string SalesDistrict 
        { 
            get {
                return _SalesDistrict;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("SalesDistrict cannot be null and must have a value.");
                }
                if(value.Length > 6)
                {
                    throw new ValidationException("SalesDistrict cannot be longer than 6 characters.");
                }
                else
                {
                    _SalesDistrict = value;
                }
            }
        }
        private string _SoldToParty;
        public string SoldToParty 
        { 
            get {
                return _SoldToParty;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("SoldToParty cannot be null and must have a value.");
                }
                if(value.Length > 10)
                {
                    throw new ValidationException("SoldToParty cannot be longer than 10 characters.");
                }
                else
                {
                    _SoldToParty = value;
                }
            }
        }
        public Edm.Date CreationDate { get; set; }
        private string _CreatedByUser;
        public string CreatedByUser 
        { 
            get {
                return _CreatedByUser;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("CreatedByUser cannot be null and must have a value.");
                }
                if(value.Length > 12)
                {
                    throw new ValidationException("CreatedByUser cannot be longer than 12 characters.");
                }
                else
                {
                    _CreatedByUser = value;
                }
            }
        }
        public Edm.Date LastChangeDate { get; set; }
        private string _SenderBusinessSystemName;
        public string SenderBusinessSystemName 
        { 
            get {
                return _SenderBusinessSystemName;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("SenderBusinessSystemName cannot be null and must have a value.");
                }
                if(value.Length > 60)
                {
                    throw new ValidationException("SenderBusinessSystemName cannot be longer than 60 characters.");
                }
                else
                {
                    _SenderBusinessSystemName = value;
                }
            }
        }
        private string _ExternalDocumentID;
        public string ExternalDocumentID 
        { 
            get {
                return _ExternalDocumentID;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("ExternalDocumentID cannot be null and must have a value.");
                }
                if(value.Length > 40)
                {
                    throw new ValidationException("ExternalDocumentID cannot be longer than 40 characters.");
                }
                else
                {
                    _ExternalDocumentID = value;
                }
            }
        }
        public DateTime LastChangeDateTime { get; set; }
        public DateTime ExternalDocLastChangeDateTime { get; set; }
        private string _PurchaseOrderByCustomer;
        public string PurchaseOrderByCustomer 
        { 
            get {
                return _PurchaseOrderByCustomer;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("PurchaseOrderByCustomer cannot be null and must have a value.");
                }
                if(value.Length > 35)
                {
                    throw new ValidationException("PurchaseOrderByCustomer cannot be longer than 35 characters.");
                }
                else
                {
                    _PurchaseOrderByCustomer = value;
                }
            }
        }
        private string _PurchaseOrderByShipToParty;
        public string PurchaseOrderByShipToParty 
        { 
            get {
                return _PurchaseOrderByShipToParty;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("PurchaseOrderByShipToParty cannot be null and must have a value.");
                }
                if(value.Length > 35)
                {
                    throw new ValidationException("PurchaseOrderByShipToParty cannot be longer than 35 characters.");
                }
                else
                {
                    _PurchaseOrderByShipToParty = value;
                }
            }
        }
        private string _CustomerPurchaseOrderType;
        public string CustomerPurchaseOrderType 
        { 
            get {
                return _CustomerPurchaseOrderType;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("CustomerPurchaseOrderType cannot be null and must have a value.");
                }
                if(value.Length > 4)
                {
                    throw new ValidationException("CustomerPurchaseOrderType cannot be longer than 4 characters.");
                }
                else
                {
                    _CustomerPurchaseOrderType = value;
                }
            }
        }
        public Edm.Date CustomerPurchaseOrderDate { get; set; }
        public Edm.Date SalesOrderDate { get; set; }
        public decimal TotalNetAmount { get; set; }
        private string _OverallDeliveryStatus;
        public string OverallDeliveryStatus 
        { 
            get {
                return _OverallDeliveryStatus;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("OverallDeliveryStatus cannot be null and must have a value.");
                }
                if(value.Length > 1)
                {
                    throw new ValidationException("OverallDeliveryStatus cannot be longer than 1 characters.");
                }
                else
                {
                    _OverallDeliveryStatus = value;
                }
            }
        }
        private string _TotalBlockStatus;
        public string TotalBlockStatus 
        { 
            get {
                return _TotalBlockStatus;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("TotalBlockStatus cannot be null and must have a value.");
                }
                if(value.Length > 1)
                {
                    throw new ValidationException("TotalBlockStatus cannot be longer than 1 characters.");
                }
                else
                {
                    _TotalBlockStatus = value;
                }
            }
        }
        private string _OverallOrdReltdBillgStatus;
        public string OverallOrdReltdBillgStatus 
        { 
            get {
                return _OverallOrdReltdBillgStatus;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("OverallOrdReltdBillgStatus cannot be null and must have a value.");
                }
                if(value.Length > 1)
                {
                    throw new ValidationException("OverallOrdReltdBillgStatus cannot be longer than 1 characters.");
                }
                else
                {
                    _OverallOrdReltdBillgStatus = value;
                }
            }
        }
        private string _OverallSDDocReferenceStatus;
        public string OverallSDDocReferenceStatus 
        { 
            get {
                return _OverallSDDocReferenceStatus;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("OverallSDDocReferenceStatus cannot be null and must have a value.");
                }
                if(value.Length > 1)
                {
                    throw new ValidationException("OverallSDDocReferenceStatus cannot be longer than 1 characters.");
                }
                else
                {
                    _OverallSDDocReferenceStatus = value;
                }
            }
        }
        private string _TransactionCurrency;
        public string TransactionCurrency 
        { 
            get {
                return _TransactionCurrency;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("TransactionCurrency cannot be null and must have a value.");
                }
                if(value.Length > 5)
                {
                    throw new ValidationException("TransactionCurrency cannot be longer than 5 characters.");
                }
                else
                {
                    _TransactionCurrency = value;
                }
            }
        }
        private string _SDDocumentReason;
        public string SDDocumentReason 
        { 
            get {
                return _SDDocumentReason;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("SDDocumentReason cannot be null and must have a value.");
                }
                if(value.Length > 3)
                {
                    throw new ValidationException("SDDocumentReason cannot be longer than 3 characters.");
                }
                else
                {
                    _SDDocumentReason = value;
                }
            }
        }
        public Edm.Date PricingDate { get; set; }
        public decimal PriceDetnExchangeRate { get; set; }
        public Edm.Date RequestedDeliveryDate { get; set; }
        private string _ShippingCondition;
        public string ShippingCondition 
        { 
            get {
                return _ShippingCondition;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("ShippingCondition cannot be null and must have a value.");
                }
                if(value.Length > 2)
                {
                    throw new ValidationException("ShippingCondition cannot be longer than 2 characters.");
                }
                else
                {
                    _ShippingCondition = value;
                }
            }
        }
        public Edm.Boolean CompleteDeliveryIsDefined { get; set; }
        private string _ShippingType;
        public string ShippingType 
        { 
            get {
                return _ShippingType;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("ShippingType cannot be null and must have a value.");
                }
                if(value.Length > 2)
                {
                    throw new ValidationException("ShippingType cannot be longer than 2 characters.");
                }
                else
                {
                    _ShippingType = value;
                }
            }
        }
        private string _HeaderBillingBlockReason;
        public string HeaderBillingBlockReason 
        { 
            get {
                return _HeaderBillingBlockReason;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("HeaderBillingBlockReason cannot be null and must have a value.");
                }
                if(value.Length > 2)
                {
                    throw new ValidationException("HeaderBillingBlockReason cannot be longer than 2 characters.");
                }
                else
                {
                    _HeaderBillingBlockReason = value;
                }
            }
        }
        private string _DeliveryBlockReason;
        public string DeliveryBlockReason 
        { 
            get {
                return _DeliveryBlockReason;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("DeliveryBlockReason cannot be null and must have a value.");
                }
                if(value.Length > 2)
                {
                    throw new ValidationException("DeliveryBlockReason cannot be longer than 2 characters.");
                }
                else
                {
                    _DeliveryBlockReason = value;
                }
            }
        }
        private string _DeliveryDateTypeRule;
        public string DeliveryDateTypeRule 
        { 
            get {
                return _DeliveryDateTypeRule;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("DeliveryDateTypeRule cannot be null and must have a value.");
                }
                if(value.Length > 1)
                {
                    throw new ValidationException("DeliveryDateTypeRule cannot be longer than 1 characters.");
                }
                else
                {
                    _DeliveryDateTypeRule = value;
                }
            }
        }
        private string _IncotermsClassification;
        public string IncotermsClassification 
        { 
            get {
                return _IncotermsClassification;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("IncotermsClassification cannot be null and must have a value.");
                }
                if(value.Length > 3)
                {
                    throw new ValidationException("IncotermsClassification cannot be longer than 3 characters.");
                }
                else
                {
                    _IncotermsClassification = value;
                }
            }
        }
        private string _IncotermsTransferLocation;
        public string IncotermsTransferLocation 
        { 
            get {
                return _IncotermsTransferLocation;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("IncotermsTransferLocation cannot be null and must have a value.");
                }
                if(value.Length > 28)
                {
                    throw new ValidationException("IncotermsTransferLocation cannot be longer than 28 characters.");
                }
                else
                {
                    _IncotermsTransferLocation = value;
                }
            }
        }
        private string _IncotermsLocation1;
        public string IncotermsLocation1 
        { 
            get {
                return _IncotermsLocation1;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("IncotermsLocation1 cannot be null and must have a value.");
                }
                if(value.Length > 70)
                {
                    throw new ValidationException("IncotermsLocation1 cannot be longer than 70 characters.");
                }
                else
                {
                    _IncotermsLocation1 = value;
                }
            }
        }
        private string _IncotermsLocation2;
        public string IncotermsLocation2 
        { 
            get {
                return _IncotermsLocation2;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("IncotermsLocation2 cannot be null and must have a value.");
                }
                if(value.Length > 70)
                {
                    throw new ValidationException("IncotermsLocation2 cannot be longer than 70 characters.");
                }
                else
                {
                    _IncotermsLocation2 = value;
                }
            }
        }
        private string _IncotermsVersion;
        public string IncotermsVersion 
        { 
            get {
                return _IncotermsVersion;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("IncotermsVersion cannot be null and must have a value.");
                }
                if(value.Length > 4)
                {
                    throw new ValidationException("IncotermsVersion cannot be longer than 4 characters.");
                }
                else
                {
                    _IncotermsVersion = value;
                }
            }
        }
        private string _CustomerPriceGroup;
        public string CustomerPriceGroup 
        { 
            get {
                return _CustomerPriceGroup;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("CustomerPriceGroup cannot be null and must have a value.");
                }
                if(value.Length > 2)
                {
                    throw new ValidationException("CustomerPriceGroup cannot be longer than 2 characters.");
                }
                else
                {
                    _CustomerPriceGroup = value;
                }
            }
        }
        private string _PriceListType;
        public string PriceListType 
        { 
            get {
                return _PriceListType;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("PriceListType cannot be null and must have a value.");
                }
                if(value.Length > 2)
                {
                    throw new ValidationException("PriceListType cannot be longer than 2 characters.");
                }
                else
                {
                    _PriceListType = value;
                }
            }
        }
        private string _CustomerPaymentTerms;
        public string CustomerPaymentTerms 
        { 
            get {
                return _CustomerPaymentTerms;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("CustomerPaymentTerms cannot be null and must have a value.");
                }
                if(value.Length > 4)
                {
                    throw new ValidationException("CustomerPaymentTerms cannot be longer than 4 characters.");
                }
                else
                {
                    _CustomerPaymentTerms = value;
                }
            }
        }
        private string _PaymentMethod;
        public string PaymentMethod 
        { 
            get {
                return _PaymentMethod;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("PaymentMethod cannot be null and must have a value.");
                }
                if(value.Length > 1)
                {
                    throw new ValidationException("PaymentMethod cannot be longer than 1 characters.");
                }
                else
                {
                    _PaymentMethod = value;
                }
            }
        }
        public Edm.Date FixedValueDate { get; set; }
        private string _AssignmentReference;
        public string AssignmentReference 
        { 
            get {
                return _AssignmentReference;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("AssignmentReference cannot be null and must have a value.");
                }
                if(value.Length > 18)
                {
                    throw new ValidationException("AssignmentReference cannot be longer than 18 characters.");
                }
                else
                {
                    _AssignmentReference = value;
                }
            }
        }
        private string _ReferenceSDDocument;
        public string ReferenceSDDocument 
        { 
            get {
                return _ReferenceSDDocument;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("ReferenceSDDocument cannot be null and must have a value.");
                }
                if(value.Length > 10)
                {
                    throw new ValidationException("ReferenceSDDocument cannot be longer than 10 characters.");
                }
                else
                {
                    _ReferenceSDDocument = value;
                }
            }
        }
        private string _ReferenceSDDocumentCategory;
        public string ReferenceSDDocumentCategory 
        { 
            get {
                return _ReferenceSDDocumentCategory;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("ReferenceSDDocumentCategory cannot be null and must have a value.");
                }
                if(value.Length > 4)
                {
                    throw new ValidationException("ReferenceSDDocumentCategory cannot be longer than 4 characters.");
                }
                else
                {
                    _ReferenceSDDocumentCategory = value;
                }
            }
        }
        private string _AccountingDocExternalReference;
        public string AccountingDocExternalReference 
        { 
            get {
                return _AccountingDocExternalReference;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("AccountingDocExternalReference cannot be null and must have a value.");
                }
                if(value.Length > 16)
                {
                    throw new ValidationException("AccountingDocExternalReference cannot be longer than 16 characters.");
                }
                else
                {
                    _AccountingDocExternalReference = value;
                }
            }
        }
        private string _CustomerAccountAssignmentGroup;
        public string CustomerAccountAssignmentGroup 
        { 
            get {
                return _CustomerAccountAssignmentGroup;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("CustomerAccountAssignmentGroup cannot be null and must have a value.");
                }
                if(value.Length > 2)
                {
                    throw new ValidationException("CustomerAccountAssignmentGroup cannot be longer than 2 characters.");
                }
                else
                {
                    _CustomerAccountAssignmentGroup = value;
                }
            }
        }
        public decimal AccountingExchangeRate { get; set; }
        private string _CustomerGroup;
        public string CustomerGroup 
        { 
            get {
                return _CustomerGroup;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("CustomerGroup cannot be null and must have a value.");
                }
                if(value.Length > 2)
                {
                    throw new ValidationException("CustomerGroup cannot be longer than 2 characters.");
                }
                else
                {
                    _CustomerGroup = value;
                }
            }
        }
        private string _AdditionalCustomerGroup1;
        public string AdditionalCustomerGroup1 
        { 
            get {
                return _AdditionalCustomerGroup1;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("AdditionalCustomerGroup1 cannot be null and must have a value.");
                }
                if(value.Length > 3)
                {
                    throw new ValidationException("AdditionalCustomerGroup1 cannot be longer than 3 characters.");
                }
                else
                {
                    _AdditionalCustomerGroup1 = value;
                }
            }
        }
        private string _AdditionalCustomerGroup2;
        public string AdditionalCustomerGroup2 
        { 
            get {
                return _AdditionalCustomerGroup2;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("AdditionalCustomerGroup2 cannot be null and must have a value.");
                }
                if(value.Length > 3)
                {
                    throw new ValidationException("AdditionalCustomerGroup2 cannot be longer than 3 characters.");
                }
                else
                {
                    _AdditionalCustomerGroup2 = value;
                }
            }
        }
        private string _AdditionalCustomerGroup3;
        public string AdditionalCustomerGroup3 
        { 
            get {
                return _AdditionalCustomerGroup3;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("AdditionalCustomerGroup3 cannot be null and must have a value.");
                }
                if(value.Length > 3)
                {
                    throw new ValidationException("AdditionalCustomerGroup3 cannot be longer than 3 characters.");
                }
                else
                {
                    _AdditionalCustomerGroup3 = value;
                }
            }
        }
        private string _AdditionalCustomerGroup4;
        public string AdditionalCustomerGroup4 
        { 
            get {
                return _AdditionalCustomerGroup4;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("AdditionalCustomerGroup4 cannot be null and must have a value.");
                }
                if(value.Length > 3)
                {
                    throw new ValidationException("AdditionalCustomerGroup4 cannot be longer than 3 characters.");
                }
                else
                {
                    _AdditionalCustomerGroup4 = value;
                }
            }
        }
        private string _AdditionalCustomerGroup5;
        public string AdditionalCustomerGroup5 
        { 
            get {
                return _AdditionalCustomerGroup5;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("AdditionalCustomerGroup5 cannot be null and must have a value.");
                }
                if(value.Length > 3)
                {
                    throw new ValidationException("AdditionalCustomerGroup5 cannot be longer than 3 characters.");
                }
                else
                {
                    _AdditionalCustomerGroup5 = value;
                }
            }
        }
        public Edm.Boolean SlsDocIsRlvtForProofOfDeliv { get; set; }
        private string _CustomerTaxClassification1;
        public string CustomerTaxClassification1 
        { 
            get {
                return _CustomerTaxClassification1;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("CustomerTaxClassification1 cannot be null and must have a value.");
                }
                if(value.Length > 1)
                {
                    throw new ValidationException("CustomerTaxClassification1 cannot be longer than 1 characters.");
                }
                else
                {
                    _CustomerTaxClassification1 = value;
                }
            }
        }
        private string _CustomerTaxClassification2;
        public string CustomerTaxClassification2 
        { 
            get {
                return _CustomerTaxClassification2;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("CustomerTaxClassification2 cannot be null and must have a value.");
                }
                if(value.Length > 1)
                {
                    throw new ValidationException("CustomerTaxClassification2 cannot be longer than 1 characters.");
                }
                else
                {
                    _CustomerTaxClassification2 = value;
                }
            }
        }
        private string _CustomerTaxClassification3;
        public string CustomerTaxClassification3 
        { 
            get {
                return _CustomerTaxClassification3;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("CustomerTaxClassification3 cannot be null and must have a value.");
                }
                if(value.Length > 1)
                {
                    throw new ValidationException("CustomerTaxClassification3 cannot be longer than 1 characters.");
                }
                else
                {
                    _CustomerTaxClassification3 = value;
                }
            }
        }
        private string _CustomerTaxClassification4;
        public string CustomerTaxClassification4 
        { 
            get {
                return _CustomerTaxClassification4;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("CustomerTaxClassification4 cannot be null and must have a value.");
                }
                if(value.Length > 1)
                {
                    throw new ValidationException("CustomerTaxClassification4 cannot be longer than 1 characters.");
                }
                else
                {
                    _CustomerTaxClassification4 = value;
                }
            }
        }
        private string _CustomerTaxClassification5;
        public string CustomerTaxClassification5 
        { 
            get {
                return _CustomerTaxClassification5;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("CustomerTaxClassification5 cannot be null and must have a value.");
                }
                if(value.Length > 1)
                {
                    throw new ValidationException("CustomerTaxClassification5 cannot be longer than 1 characters.");
                }
                else
                {
                    _CustomerTaxClassification5 = value;
                }
            }
        }
        private string _CustomerTaxClassification6;
        public string CustomerTaxClassification6 
        { 
            get {
                return _CustomerTaxClassification6;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("CustomerTaxClassification6 cannot be null and must have a value.");
                }
                if(value.Length > 1)
                {
                    throw new ValidationException("CustomerTaxClassification6 cannot be longer than 1 characters.");
                }
                else
                {
                    _CustomerTaxClassification6 = value;
                }
            }
        }
        private string _CustomerTaxClassification7;
        public string CustomerTaxClassification7 
        { 
            get {
                return _CustomerTaxClassification7;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("CustomerTaxClassification7 cannot be null and must have a value.");
                }
                if(value.Length > 1)
                {
                    throw new ValidationException("CustomerTaxClassification7 cannot be longer than 1 characters.");
                }
                else
                {
                    _CustomerTaxClassification7 = value;
                }
            }
        }
        private string _CustomerTaxClassification8;
        public string CustomerTaxClassification8 
        { 
            get {
                return _CustomerTaxClassification8;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("CustomerTaxClassification8 cannot be null and must have a value.");
                }
                if(value.Length > 1)
                {
                    throw new ValidationException("CustomerTaxClassification8 cannot be longer than 1 characters.");
                }
                else
                {
                    _CustomerTaxClassification8 = value;
                }
            }
        }
        private string _CustomerTaxClassification9;
        public string CustomerTaxClassification9 
        { 
            get {
                return _CustomerTaxClassification9;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("CustomerTaxClassification9 cannot be null and must have a value.");
                }
                if(value.Length > 1)
                {
                    throw new ValidationException("CustomerTaxClassification9 cannot be longer than 1 characters.");
                }
                else
                {
                    _CustomerTaxClassification9 = value;
                }
            }
        }
        private string _TaxDepartureCountry;
        public string TaxDepartureCountry 
        { 
            get {
                return _TaxDepartureCountry;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("TaxDepartureCountry cannot be null and must have a value.");
                }
                if(value.Length > 3)
                {
                    throw new ValidationException("TaxDepartureCountry cannot be longer than 3 characters.");
                }
                else
                {
                    _TaxDepartureCountry = value;
                }
            }
        }
        private string _VATRegistrationCountry;
        public string VATRegistrationCountry 
        { 
            get {
                return _VATRegistrationCountry;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("VATRegistrationCountry cannot be null and must have a value.");
                }
                if(value.Length > 3)
                {
                    throw new ValidationException("VATRegistrationCountry cannot be longer than 3 characters.");
                }
                else
                {
                    _VATRegistrationCountry = value;
                }
            }
        }
        private string _SalesOrderApprovalReason;
        public string SalesOrderApprovalReason 
        { 
            get {
                return _SalesOrderApprovalReason;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("SalesOrderApprovalReason cannot be null and must have a value.");
                }
                if(value.Length > 4)
                {
                    throw new ValidationException("SalesOrderApprovalReason cannot be longer than 4 characters.");
                }
                else
                {
                    _SalesOrderApprovalReason = value;
                }
            }
        }
        private string _SalesDocApprovalStatus;
        public string SalesDocApprovalStatus 
        { 
            get {
                return _SalesDocApprovalStatus;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("SalesDocApprovalStatus cannot be null and must have a value.");
                }
                if(value.Length > 1)
                {
                    throw new ValidationException("SalesDocApprovalStatus cannot be longer than 1 characters.");
                }
                else
                {
                    _SalesDocApprovalStatus = value;
                }
            }
        }
        private string _OverallSDProcessStatus;
        public string OverallSDProcessStatus 
        { 
            get {
                return _OverallSDProcessStatus;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("OverallSDProcessStatus cannot be null and must have a value.");
                }
                if(value.Length > 1)
                {
                    throw new ValidationException("OverallSDProcessStatus cannot be longer than 1 characters.");
                }
                else
                {
                    _OverallSDProcessStatus = value;
                }
            }
        }
        private string _TotalCreditCheckStatus;
        public string TotalCreditCheckStatus 
        { 
            get {
                return _TotalCreditCheckStatus;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("TotalCreditCheckStatus cannot be null and must have a value.");
                }
                if(value.Length > 1)
                {
                    throw new ValidationException("TotalCreditCheckStatus cannot be longer than 1 characters.");
                }
                else
                {
                    _TotalCreditCheckStatus = value;
                }
            }
        }
        private string _OverallTotalDeliveryStatus;
        public string OverallTotalDeliveryStatus 
        { 
            get {
                return _OverallTotalDeliveryStatus;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("OverallTotalDeliveryStatus cannot be null and must have a value.");
                }
                if(value.Length > 1)
                {
                    throw new ValidationException("OverallTotalDeliveryStatus cannot be longer than 1 characters.");
                }
                else
                {
                    _OverallTotalDeliveryStatus = value;
                }
            }
        }
        private string _OverallSDDocumentRejectionSts;
        public string OverallSDDocumentRejectionSts 
        { 
            get {
                return _OverallSDDocumentRejectionSts;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("OverallSDDocumentRejectionSts cannot be null and must have a value.");
                }
                if(value.Length > 1)
                {
                    throw new ValidationException("OverallSDDocumentRejectionSts cannot be longer than 1 characters.");
                }
                else
                {
                    _OverallSDDocumentRejectionSts = value;
                }
            }
        }
        public Edm.Date BillingDocumentDate { get; set; }
        private string _ContractAccount;
        public string ContractAccount 
        { 
            get {
                return _ContractAccount;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("ContractAccount cannot be null and must have a value.");
                }
                if(value.Length > 12)
                {
                    throw new ValidationException("ContractAccount cannot be longer than 12 characters.");
                }
                else
                {
                    _ContractAccount = value;
                }
            }
        }
        private string _AdditionalValueDays;
        public string AdditionalValueDays 
        { 
            get {
                return _AdditionalValueDays;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("AdditionalValueDays cannot be null and must have a value.");
                }
                if(value.Length > 2)
                {
                    throw new ValidationException("AdditionalValueDays cannot be longer than 2 characters.");
                }
                else
                {
                    _AdditionalValueDays = value;
                }
            }
        }
        private string _CustomerPurchaseOrderSuplmnt;
        public string CustomerPurchaseOrderSuplmnt 
        { 
            get {
                return _CustomerPurchaseOrderSuplmnt;
            }
            set {
                if(value == null)
                {
                    throw new ValidationException("CustomerPurchaseOrderSuplmnt cannot be null and must have a value.");
                }
                if(value.Length > 4)
                {
                    throw new ValidationException("CustomerPurchaseOrderSuplmnt cannot be longer than 4 characters.");
                }
                else
                {
                    _CustomerPurchaseOrderSuplmnt = value;
                }
            }
        }
        public Edm.Date ServicesRenderedDate { get; set; }
        public DeferredEnumerable<API_SALES_ORDER_SRV.A_SalesOrderItemType> to_Item {get; set;}

        public DeferredEnumerable<API_SALES_ORDER_SRV.A_SalesOrderHeaderPartnerType> to_Partner {get; set;}

        public DeferredEnumerable<API_SALES_ORDER_SRV.A_SlsOrdPaymentPlanItemDetailsType> to_PaymentPlanItemDetails {get; set;}

        public DeferredEnumerable<API_SALES_ORDER_SRV.A_SalesOrderHeaderPrElementType> to_PricingElement {get; set;}

        public DeferredEnumerable<API_SALES_ORDER_SRV.A_SalesOrderRelatedObjectType> to_RelatedObject {get; set;}

        public DeferredEnumerable<API_SALES_ORDER_SRV.A_SalesOrderTextType> to_Text {get; set;}

        protected override Dictionary<string, List<string>> ReferenceKeys 
        {   
            get 
            {
                var result = new Dictionary<string, List<string>>();
                result.Add("PrimaryKey", new List<string>() {"SalesOrder"});
                result.Add("to_Item", new List<string>() {"SalesOrder"});
                result.Add("to_Partner", new List<string>() {"SalesOrder"});
                result.Add("to_PaymentPlanItemDetails", new List<string>() {"SalesOrder"});
                result.Add("to_PricingElement", new List<string>() {"SalesOrder"});
                result.Add("to_RelatedObject", new List<string>() {"SalesOrder"});
                result.Add("to_Text", new List<string>() {"SalesOrder"});

                return result;
            }
        }


    }
}
